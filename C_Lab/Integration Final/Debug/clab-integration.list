
clab-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b70  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d04  08000d04  00001d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d28  08000d28  00002094  2**0
                  CONTENTS
  4 .ARM          00000000  08000d28  08000d28  00002094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d28  08000d28  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d28  08000d28  00001d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d2c  08000d2c  00001d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08000d30  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002094  2**0
                  CONTENTS
 10 .bss          00000170  20000094  20000094  00002094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00002094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000226f  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aa7  00000000  00000000  00004333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00004de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011f  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001636f  00000000  00000000  000050af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cc0  00000000  00000000  0001b41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076adf  00000000  00000000  0001e0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00094bbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007dc  00000000  00000000  00094c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  000953dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000094 	.word	0x20000094
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cec 	.word	0x08000cec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000098 	.word	0x20000098
 80001d0:	08000cec 	.word	0x08000cec

080001d4 <enable_clocks>:
#include "stm32f303xc.h"
#include "set_get_leds.h"


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_clocks+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_clocks+0x1c>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <led_case>:

uint8_t led_case(char *restofwords) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]

    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 8000228:	e00f      	b.n	800024a <led_case+0x32>
        value <<= 1; // Shift left
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	73fb      	strb	r3, [r7, #15]
        if (restofwords[i] == '1') {
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b31      	cmp	r3, #49	@ 0x31
 800023a:	d103      	bne.n	8000244 <led_case+0x2c>
            value |= 1;
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	73fb      	strb	r3, [r7, #15]
        }
        i++;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	3301      	adds	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d002      	beq.n	800025c <led_case+0x44>
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b07      	cmp	r3, #7
 800025a:	dde6      	ble.n	800022a <led_case+0x12>
    }

    return value;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <main>:
#include "serial.h"
#include "parse.h"

#define BUFFER_SIZE 128

int main() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

	SerialInitialise(BUFFER_SIZE, BAUD_115200, &USART1_PORT, &parse_buffer);
 8000270:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <main+0x14>)
 8000272:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <main+0x18>)
 8000274:	2104      	movs	r1, #4
 8000276:	2080      	movs	r0, #128	@ 0x80
 8000278:	f000 f8d8 	bl	800042c <SerialInitialise>

	for (;;) {
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x10>
 8000280:	08000289 	.word	0x08000289
 8000284:	20000000 	.word	0x20000000

08000288 <parse_buffer>:
#define SERIAL_ARG 7
#define LED_ARG 4
#define TIMER_ARG 6
#define ONESHOT_ARG 8

void parse_buffer(volatile uint8_t *buffer, uint32_t size) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
	stop_timer();
 8000292:	f000 fbcf 	bl	8000a34 <stop_timer>
	set_led_state(0b00000000);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fa52 	bl	8000740 <set_led_state>


	if ((size >= SERIAL_ARG && strncmp((volatile uint8_t*)buffer, "serial ", SERIAL_ARG) == 0)) {
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b06      	cmp	r3, #6
 80002a0:	d90e      	bls.n	80002c0 <parse_buffer+0x38>
 80002a2:	2207      	movs	r2, #7
 80002a4:	4936      	ldr	r1, [pc, #216]	@ (8000380 <parse_buffer+0xf8>)
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f000 fcd2 	bl	8000c50 <strncmp>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d106      	bne.n	80002c0 <parse_buffer+0x38>

		tx_string((volatile uint8_t*)buffer + SERIAL_ARG, &USART1_PORT);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3307      	adds	r3, #7
 80002b6:	4933      	ldr	r1, [pc, #204]	@ (8000384 <parse_buffer+0xfc>)
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fa0e 	bl	80006da <tx_string>
		return;
 80002be:	e05b      	b.n	8000378 <parse_buffer+0xf0>
	}

	// Checks if the argument is to display leds
	if ((size >= LED_ARG && strncmp((volatile uint8_t*)buffer, "led ", LED_ARG) == 0)) {
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b03      	cmp	r3, #3
 80002c4:	d916      	bls.n	80002f4 <parse_buffer+0x6c>
 80002c6:	2204      	movs	r2, #4
 80002c8:	492f      	ldr	r1, [pc, #188]	@ (8000388 <parse_buffer+0x100>)
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 fcc0 	bl	8000c50 <strncmp>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10e      	bne.n	80002f4 <parse_buffer+0x6c>

        uint8_t led_pattern = led_case((volatile uint8_t*)buffer + LED_ARG);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3304      	adds	r3, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff9c 	bl	8000218 <led_case>
 80002e0:	4603      	mov	r3, r0
 80002e2:	75fb      	strb	r3, [r7, #23]
        enable_clocks();                         // enable the clocks
 80002e4:	f7ff ff76 	bl	80001d4 <enable_clocks>
        initialise_board();                      // initialise the boards
 80002e8:	f7ff ff84 	bl	80001f4 <initialise_board>
        set_led_state(led_pattern);
 80002ec:	7dfb      	ldrb	r3, [r7, #23]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fa26 	bl	8000740 <set_led_state>
}

	// Checks if the argument is to start timer
    if ((size >= TIMER_ARG && strncmp((volatile uint8_t*)buffer, "timer ", TIMER_ARG) == 0)) {
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2b05      	cmp	r3, #5
 80002f8:	d918      	bls.n	800032c <parse_buffer+0xa4>
 80002fa:	2206      	movs	r2, #6
 80002fc:	4923      	ldr	r1, [pc, #140]	@ (800038c <parse_buffer+0x104>)
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f000 fca6 	bl	8000c50 <strncmp>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d110      	bne.n	800032c <parse_buffer+0xa4>

		uint32_t timer_delay = timers_case(buffer + 6);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3306      	adds	r3, #6
 800030e:	4618      	mov	r0, r3
 8000310:	f000 faa6 	bl	8000860 <timers_case>
 8000314:	4603      	mov	r3, r0
 8000316:	613b      	str	r3, [r7, #16]
		enable_clocks();
 8000318:	f7ff ff5c 	bl	80001d4 <enable_clocks>
		initialise_board();
 800031c:	f7ff ff6a 	bl	80001f4 <initialise_board>
		Timer_Init(timer_delay, led_callback);
 8000320:	491b      	ldr	r1, [pc, #108]	@ (8000390 <parse_buffer+0x108>)
 8000322:	6938      	ldr	r0, [r7, #16]
 8000324:	f000 fac2 	bl	80008ac <Timer_Init>
		Timer_Start();
 8000328:	f000 faf4 	bl	8000914 <Timer_Start>
	}

    // Checks if the argument is to do oneshot
	if ((strncmp(buffer, "oneshot ", 8) == 0)) {
 800032c:	2208      	movs	r2, #8
 800032e:	4919      	ldr	r1, [pc, #100]	@ (8000394 <parse_buffer+0x10c>)
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 fc8d 	bl	8000c50 <strncmp>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d11d      	bne.n	8000378 <parse_buffer+0xf0>
    if ((size >= ONESHOT_ARG && strncmp((volatile uint8_t*)buffer, "oneshot ", ONESHOT_ARG) == 0)) {
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b07      	cmp	r3, #7
 8000340:	d91a      	bls.n	8000378 <parse_buffer+0xf0>
 8000342:	2208      	movs	r2, #8
 8000344:	4913      	ldr	r1, [pc, #76]	@ (8000394 <parse_buffer+0x10c>)
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 fc82 	bl	8000c50 <strncmp>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d112      	bne.n	8000378 <parse_buffer+0xf0>

		uint32_t oneshot_delay = timers_case(buffer + 8);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3308      	adds	r3, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fa82 	bl	8000860 <timers_case>
 800035c:	4603      	mov	r3, r0
 800035e:	60fb      	str	r3, [r7, #12]
		enable_clocks();
 8000360:	f7ff ff38 	bl	80001d4 <enable_clocks>
		initialise_board();
 8000364:	f7ff ff46 	bl	80001f4 <initialise_board>
		Timer_Init(oneshot_delay, NULL);
 8000368:	2100      	movs	r1, #0
 800036a:	68f8      	ldr	r0, [r7, #12]
 800036c:	f000 fa9e 	bl	80008ac <Timer_Init>
		Timer_OneShot(oneshot_delay, led_oneshot_callback);
 8000370:	4909      	ldr	r1, [pc, #36]	@ (8000398 <parse_buffer+0x110>)
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	f000 fade 	bl	8000934 <Timer_OneShot>
	}

}


}
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	08000d04 	.word	0x08000d04
 8000384:	20000000 	.word	0x20000000
 8000388:	08000d0c 	.word	0x08000d0c
 800038c:	08000d14 	.word	0x08000d14
 8000390:	080009d5 	.word	0x080009d5
 8000394:	08000d1c 	.word	0x08000d1c
 8000398:	08000a15 	.word	0x08000a15

0800039c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	db0b      	blt.n	80003c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f003 021f 	and.w	r2, r3, #31
 80003b4:	4907      	ldr	r1, [pc, #28]	@ (80003d4 <__NVIC_EnableIRQ+0x38>)
 80003b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ba:	095b      	lsrs	r3, r3, #5
 80003bc:	2001      	movs	r0, #1
 80003be:	fa00 f202 	lsl.w	r2, r0, r2
 80003c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000e100 	.word	0xe000e100

080003d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	6039      	str	r1, [r7, #0]
 80003e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db0a      	blt.n	8000402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	490c      	ldr	r1, [pc, #48]	@ (8000424 <__NVIC_SetPriority+0x4c>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000400:	e00a      	b.n	8000418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4908      	ldr	r1, [pc, #32]	@ (8000428 <__NVIC_SetPriority+0x50>)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f003 030f 	and.w	r3, r3, #15
 800040e:	3b04      	subs	r3, #4
 8000410:	0112      	lsls	r2, r2, #4
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	440b      	add	r3, r1
 8000416:	761a      	strb	r2, [r3, #24]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <SerialInitialise>:
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rx_complete)(volatile uint8_t*, uint32_t)) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
 8000438:	603b      	str	r3, [r7, #0]
	// baudRate: the serial baud rate
	// serial_port: address of the serial port to initialise
	// rx_complete_function: pointer to callback function; inputs are pointer to string buffer
	//						 and length of the stored string respectively

	serial_port->callback = rx_complete;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000440:	4b54      	ldr	r3, [pc, #336]	@ (8000594 <SerialInitialise+0x168>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a53      	ldr	r2, [pc, #332]	@ (8000594 <SerialInitialise+0x168>)
 8000446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800044c:	4b51      	ldr	r3, [pc, #324]	@ (8000594 <SerialInitialise+0x168>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a50      	ldr	r2, [pc, #320]	@ (8000594 <SerialInitialise+0x168>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	4b4d      	ldr	r3, [pc, #308]	@ (8000594 <SerialInitialise+0x168>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	494c      	ldr	r1, [pc, #304]	@ (8000594 <SerialInitialise+0x168>)
 8000462:	4313      	orrs	r3, r2
 8000464:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	6952      	ldr	r2, [r2, #20]
 800046e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	6992      	ldr	r2, [r2, #24]
 8000478:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	69d9      	ldr	r1, [r3, #28]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	6a1a      	ldr	r2, [r3, #32]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	430a      	orrs	r2, r1
 800048a:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a19      	ldr	r1, [r3, #32]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	430a      	orrs	r2, r1
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	68da      	ldr	r2, [r3, #12]
 80004a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000594 <SerialInitialise+0x168>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	493b      	ldr	r1, [pc, #236]	@ (8000594 <SerialInitialise+0x168>)
 80004a8:	4313      	orrs	r3, r2
 80004aa:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	4b38      	ldr	r3, [pc, #224]	@ (8000594 <SerialInitialise+0x168>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4937      	ldr	r1, [pc, #220]	@ (8000594 <SerialInitialise+0x168>)
 80004b6:	4313      	orrs	r3, r2
 80004b8:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	330c      	adds	r3, #12
 80004c0:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d823      	bhi.n	8000510 <SerialInitialise+0xe4>
 80004c8:	a201      	add	r2, pc, #4	@ (adr r2, 80004d0 <SerialInitialise+0xa4>)
 80004ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ce:	bf00      	nop
 80004d0:	080004e5 	.word	0x080004e5
 80004d4:	080004ef 	.word	0x080004ef
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	08000501 	.word	0x08000501
 80004e0:	08000509 	.word	0x08000509
	case BAUD_9600:
		*baud_rate_config = 0x342;  // 9600 at 8MHz
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	f240 3242 	movw	r2, #834	@ 0x342
 80004ea:	801a      	strh	r2, [r3, #0]
		break;
 80004ec:	e010      	b.n	8000510 <SerialInitialise+0xe4>
	case BAUD_19200:
		*baud_rate_config = 0x19C;  // 19200 at 8MHz
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80004f4:	801a      	strh	r2, [r3, #0]
		break;
 80004f6:	e00b      	b.n	8000510 <SerialInitialise+0xe4>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	22d0      	movs	r2, #208	@ 0xd0
 80004fc:	801a      	strh	r2, [r3, #0]
		break;
 80004fe:	e007      	b.n	8000510 <SerialInitialise+0xe4>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	228b      	movs	r2, #139	@ 0x8b
 8000504:	801a      	strh	r2, [r3, #0]
		break;
 8000506:	e003      	b.n	8000510 <SerialInitialise+0xe4>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	2246      	movs	r2, #70	@ 0x46
 800050c:	801a      	strh	r2, [r3, #0]
		break;
 800050e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f042 020d 	orr.w	r2, r2, #13
 800051e:	601a      	str	r2, [r3, #0]

	// configuring buffers
	serial_port->BufferSize = buffer_size;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	631a      	str	r2, [r3, #48]	@ 0x30
	serial_port->Buffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fada 	bl	8000ae4 <malloc>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->SecondBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fad1 	bl	8000ae4 <malloc>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054a:	b672      	cpsid	i
}
 800054c:	bf00      	nop

	__disable_irq(); // disable all interrupts while changing settings

	// enabling the interrupts
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;		// enabling RXNE interrupts
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f042 0220 	orr.w	r2, r2, #32
 800055c:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;		// enabling the error interrupts
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0201 	orr.w	r2, r2, #1
 800056c:	609a      	str	r2, [r3, #8]

	// activating interrupts and setting priority
	NVIC_SetPriority(serial_port->UART_IRQn, 5);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000572:	b25b      	sxtb	r3, r3
 8000574:	2105      	movs	r1, #5
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff2e 	bl	80003d8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);			//  enable UART interrupts
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000580:	b25b      	sxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff0a 	bl	800039c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000588:	b662      	cpsie	i
}
 800058a:	bf00      	nop

	__enable_irq(); // re-enable all interrupts

}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	// when interrupt is reached, call the rx_function
	rx_function(&USART1_PORT);
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <USART1_EXTI25_IRQHandler+0x20>)
 800059e:	f000 f80f 	bl	80005c0 <rx_function>

	// transmit if and only if the transmit interrupt TXEIE is triggered
	if (!(USART1->CR1 & USART_CR1_TXEIE) == 0) {
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <USART1_EXTI25_IRQHandler+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <USART1_EXTI25_IRQHandler+0x1c>
		tx_function(&USART1_PORT);
 80005ae:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <USART1_EXTI25_IRQHandler+0x20>)
 80005b0:	f000 f8a3 	bl	80006fa <tx_function>
	}
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	40013800 	.word	0x40013800

080005c0 <rx_function>:

void rx_function(SerialPort *serial_port) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

	// checking if receiving is working properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d050      	beq.n	8000678 <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f003 0308 	and.w	r3, r3, #8
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d149      	bne.n	8000678 <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_FE) == 0)  {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0302 	and.w	r3, r3, #2
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d142      	bne.n	8000678 <rx_function+0xb8>

		// reading the character into the buffer
		serial_port->Buffer[serial_port->Count] = (uint8_t)(serial_port->UART->RDR);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005f8:	b299      	uxth	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000602:	4413      	add	r3, r2
 8000604:	b2ca      	uxtb	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
		serial_port->Count++;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	62da      	str	r2, [r3, #44]	@ 0x2c

		// if the buffer has been filled, append the terminating character
		if (serial_port->Count + 1 == serial_port->BufferSize) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	429a      	cmp	r2, r3
 800061e:	d10b      	bne.n	8000638 <rx_function+0x78>

			serial_port->Buffer[serial_port->Count] = TERMINATOR;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
			serial_port->Count++;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
		}

		// if the terminating character has been read, reading is complete and callback occurs
		// (extension) swap the buffers
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000640:	3b01      	subs	r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11e      	bne.n	800068a <rx_function+0xca>

			volatile uint8_t* temp_pt = serial_port->Buffer;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000650:	60fb      	str	r3, [r7, #12]
			serial_port->Buffer = serial_port->SecondBuffer;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	@ 0x24
			serial_port->SecondBuffer = temp_pt;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28

			// callback with the first buffer since the first buffer is finished reading
			serial_port->callback(serial_port->SecondBuffer, serial_port->Count);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800066c:	4611      	mov	r1, r2
 800066e:	4798      	blx	r3
			serial_port->Count = 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 8000676:	e008      	b.n	800068a <rx_function+0xca>
		}

	}	else {
		// clear error flags
			serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f042 020a 	orr.w	r2, r2, #10
 8000686:	621a      	str	r2, [r3, #32]

	}

}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <tx_enable>:

void tx_enable(bool flag, SerialPort *serial_port) {
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	6039      	str	r1, [r7, #0]
 800069c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800069e:	b672      	cpsid	i
}
 80006a0:	bf00      	nop

	__disable_irq();

	// enabling the TXEIE interrupt if transmission is enabled
	if (flag == true) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d008      	beq.n	80006ba <tx_enable+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e007      	b.n	80006ca <tx_enable+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;	// ANDing with compliment to disable
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80006c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ca:	b662      	cpsie	i
}
 80006cc:	bf00      	nop
	}

	__enable_irq();
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <tx_string>:

void tx_string(uint8_t *str, SerialPort *serial_port) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]

	// set the transmission pointer to be the beginning of the string array
	serial_port->TxPointer = str;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
	tx_enable(true, serial_port);
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ffd0 	bl	8000692 <tx_enable>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <tx_function>:

void tx_function(SerialPort *serial_port) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]

	// checking for terminating character
	if (*(serial_port->TxPointer) == TERMINATOR) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d107      	bne.n	800071e <tx_function+0x24>

		serial_port->UART->TDR = TERMINATOR;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	851a      	strh	r2, [r3, #40]	@ 0x28
		tx_enable(false, serial_port);		// disable transmission interrupts
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ffba 	bl	8000692 <tx_enable>
	}

	// transmit character
	serial_port->UART->TDR = *serial_port->TxPointer;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	851a      	strh	r2, [r3, #40]	@ 0x28
	serial_port->TxPointer++;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <set_led_state>:
uint8_t get_led_state(void) {
	return led_state;                         // return the current led state stored in led_state
}

// Set the LED state manually
void set_led_state(uint8_t state) {                // pass in a uint8_t value which represents the LED state
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	led_state = state;                             // set the input of the function to the led_state
 800074a:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <set_led_state+0x28>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	7013      	strb	r3, [r2, #0]
	*((uint8_t*)&(GPIOE->ODR) + 1) = led_state;    // update the LED state to the ODR
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <set_led_state+0x2c>)
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <set_led_state+0x28>)
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000040 	.word	0x20000040
 800076c:	48001015 	.word	0x48001015

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	@ (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f000 fa78 	bl	8000c94 <__errno>
 80007a4:	4603      	mov	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <_sbrk+0x64>)
 80007c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000a000 	.word	0x2000a000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	20000208 	.word	0x20000208

080007dc <__NVIC_EnableIRQ>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	@ (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_DisableIRQ>:
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db12      	blt.n	8000850 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	490a      	ldr	r1, [pc, #40]	@ (800085c <__NVIC_DisableIRQ+0x44>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	3320      	adds	r3, #32
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000844:	f3bf 8f4f 	dsb	sy
}
 8000848:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084a:	f3bf 8f6f 	isb	sy
}
 800084e:	bf00      	nop
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <timers_case>:


static void (*timer_callback)(void) = NULL;   // Static = private to this file
static uint8_t oneshot_enabled = 0;  // 0 = normal mode, 1 = one-shot mode

uint32_t timers_case(char* restofwords) {
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]

    for(int i=0; restofwords[i] != '\0'; i++) {
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	e00f      	b.n	8000892 <timers_case+0x32>
        value = value * 10 + (restofwords[i] - '0');
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4619      	mov	r1, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	440b      	add	r3, r1
 8000888:	3b30      	subs	r3, #48	@ 0x30
 800088a:	60fb      	str	r3, [r7, #12]
    for(int i=0; restofwords[i] != '\0'; i++) {
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3301      	adds	r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1e9      	bne.n	8000872 <timers_case+0x12>
    }

    return value;
 800089e:	68fb      	ldr	r3, [r7, #12]

}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <Timer_Init>:



void Timer_Init(uint32_t interval_ms, void (*callback)(void)) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]

    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	// Enable timer clock
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <Timer_Init+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <Timer_Init+0x5c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 799;         // 8MHz / 800 = 10kHz
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c6:	f240 321f 	movw	r2, #799	@ 0x31f
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = (10* interval_ms) - 1;
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008da:	3b01      	subs	r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
	//TIM2->CNT = 0;

    TIM2->DIER |= TIM_DIER_UIE;           // Enable update interrupt
 80008de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);            // Enable TIM2 interrupt in NVIC
 80008ee:	201c      	movs	r0, #28
 80008f0:	f7ff ff74 	bl	80007dc <__NVIC_EnableIRQ>

    timer_callback = callback;
 80008f4:	4a05      	ldr	r2, [pc, #20]	@ (800090c <Timer_Init+0x60>)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	6013      	str	r3, [r2, #0]
    oneshot_enabled = 0;                  // Default = periodic mode
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <Timer_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]


}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	200000b4 	.word	0x200000b4
 8000910:	200000b8 	.word	0x200000b8

08000914 <Timer_Start>:

void Timer_Start(void) {
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM_CR1_CEN;  // Start timer
 8000918:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <Timer_OneShot>:
uint32_t Timer_GetPeriod(void) {

    return (TIM2->ARR + 1) / 10;  // Return in ms
}

void Timer_OneShot(uint32_t delay_ms, void (*callback)(void)) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	TIM2->ARR = (10 * delay_ms) - 1;
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	3b01      	subs	r3, #1
 800094e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	@ 0x24

	timer_callback = callback;
 8000958:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <Timer_OneShot+0x3c>)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	6013      	str	r3, [r2, #0]
    oneshot_enabled = 1;  // Enable one-shot mode
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <Timer_OneShot+0x40>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]

    Timer_Start();
 8000964:	f7ff ffd6 	bl	8000914 <Timer_Start>

}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000b4 	.word	0x200000b4
 8000974:	200000b8 	.word	0x200000b8

08000978 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {       // Check if update interrupt flag is set
 800097c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d01d      	beq.n	80009c6 <TIM2_IRQHandler+0x4e>
        TIM2->SR &= ~TIM_SR_UIF;        // Clear UIF flag immediately
 800098a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6113      	str	r3, [r2, #16]

        if (timer_callback != NULL) {  // If a callback is registered
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <TIM2_IRQHandler+0x54>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <TIM2_IRQHandler+0x30>
            timer_callback();          // Call the user function
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <TIM2_IRQHandler+0x54>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4798      	blx	r3
        }

        if (oneshot_enabled) {         // If it’s a one-shot timer
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <TIM2_IRQHandler+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00a      	beq.n	80009c6 <TIM2_IRQHandler+0x4e>
            timer_callback = NULL;     // Disable the callback
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <TIM2_IRQHandler+0x54>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
            TIM2->DIER &= ~TIM_DIER_UIE;  // Disable future timer interrupts
 80009b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c0:	f023 0301 	bic.w	r3, r3, #1
 80009c4:	60d3      	str	r3, [r2, #12]
        }
    }
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000b4 	.word	0x200000b4
 80009d0:	200000b8 	.word	0x200000b8

080009d4 <led_callback>:


void led_callback(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
    static uint8_t led_state = 0;  // 0 = OFF, 1 = ON
    uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <led_callback+0x38>)
 80009dc:	607b      	str	r3, [r7, #4]

    if (led_state == 0) {
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <led_callback+0x3c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d106      	bne.n	80009f4 <led_callback+0x20>
       *led_output_register = 0b01010101;  // Turn LEDs ON
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2255      	movs	r2, #85	@ 0x55
 80009ea:	701a      	strb	r2, [r3, #0]
        led_state = 1;  // Next time, turn OFF
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <led_callback+0x3c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
    } else {
        *led_output_register = 0x00;        // Turn LEDs OFF
        led_state = 0;  // Next time, turn ON
    }
}
 80009f2:	e005      	b.n	8000a00 <led_callback+0x2c>
        *led_output_register = 0x00;        // Turn LEDs OFF
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
        led_state = 0;  // Next time, turn ON
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <led_callback+0x3c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	48001015 	.word	0x48001015
 8000a10:	200000b9 	.word	0x200000b9

08000a14 <led_oneshot_callback>:

void led_oneshot_callback(void) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0

    uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <led_oneshot_callback+0x1c>)
 8000a1c:	607b      	str	r3, [r7, #4]
    *led_output_register = 0b10101010;  // Turn LEDs ON
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	22aa      	movs	r2, #170	@ 0xaa
 8000a22:	701a      	strb	r2, [r3, #0]

}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	48001015 	.word	0x48001015

08000a34 <stop_timer>:

void stop_timer() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8000a38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
    TIM2->DIER &= ~TIM_DIER_UIE;
 8000a48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	60d3      	str	r3, [r2, #12]
    TIM2->CNT = 0;
 8000a58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~TIM_SR_UIF;
 8000a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6113      	str	r3, [r2, #16]

    timer_callback = NULL;
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <stop_timer+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
    oneshot_enabled = 0;
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <stop_timer+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

    NVIC_DisableIRQ(TIM2_IRQn);
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f7ff fecb 	bl	8000818 <__NVIC_DisableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	200000b8 	.word	0x200000b8

08000a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000abe:	f000 f8ef 	bl	8000ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fbd3 	bl	800026c <main>

08000ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   r0, =_estack
 8000ac8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000ad4:	08000d30 	.word	0x08000d30
  ldr r2, =_sbss
 8000ad8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000adc:	20000204 	.word	0x20000204

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <malloc>:
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <malloc+0xc>)
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f000 b825 	b.w	8000b38 <_malloc_r>
 8000aee:	bf00      	nop
 8000af0:	20000044 	.word	0x20000044

08000af4 <sbrk_aligned>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4e0f      	ldr	r6, [pc, #60]	@ (8000b34 <sbrk_aligned+0x40>)
 8000af8:	460c      	mov	r4, r1
 8000afa:	6831      	ldr	r1, [r6, #0]
 8000afc:	4605      	mov	r5, r0
 8000afe:	b911      	cbnz	r1, 8000b06 <sbrk_aligned+0x12>
 8000b00:	f000 f8b8 	bl	8000c74 <_sbrk_r>
 8000b04:	6030      	str	r0, [r6, #0]
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	f000 f8b3 	bl	8000c74 <_sbrk_r>
 8000b0e:	1c43      	adds	r3, r0, #1
 8000b10:	d103      	bne.n	8000b1a <sbrk_aligned+0x26>
 8000b12:	f04f 34ff 	mov.w	r4, #4294967295
 8000b16:	4620      	mov	r0, r4
 8000b18:	bd70      	pop	{r4, r5, r6, pc}
 8000b1a:	1cc4      	adds	r4, r0, #3
 8000b1c:	f024 0403 	bic.w	r4, r4, #3
 8000b20:	42a0      	cmp	r0, r4
 8000b22:	d0f8      	beq.n	8000b16 <sbrk_aligned+0x22>
 8000b24:	1a21      	subs	r1, r4, r0
 8000b26:	4628      	mov	r0, r5
 8000b28:	f000 f8a4 	bl	8000c74 <_sbrk_r>
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	d1f2      	bne.n	8000b16 <sbrk_aligned+0x22>
 8000b30:	e7ef      	b.n	8000b12 <sbrk_aligned+0x1e>
 8000b32:	bf00      	nop
 8000b34:	200000bc 	.word	0x200000bc

08000b38 <_malloc_r>:
 8000b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b3c:	1ccd      	adds	r5, r1, #3
 8000b3e:	f025 0503 	bic.w	r5, r5, #3
 8000b42:	3508      	adds	r5, #8
 8000b44:	2d0c      	cmp	r5, #12
 8000b46:	bf38      	it	cc
 8000b48:	250c      	movcc	r5, #12
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	db01      	blt.n	8000b54 <_malloc_r+0x1c>
 8000b50:	42a9      	cmp	r1, r5
 8000b52:	d904      	bls.n	8000b5e <_malloc_r+0x26>
 8000b54:	230c      	movs	r3, #12
 8000b56:	6033      	str	r3, [r6, #0]
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c34 <_malloc_r+0xfc>
 8000b62:	f000 f869 	bl	8000c38 <__malloc_lock>
 8000b66:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	bb44      	cbnz	r4, 8000bc0 <_malloc_r+0x88>
 8000b6e:	4629      	mov	r1, r5
 8000b70:	4630      	mov	r0, r6
 8000b72:	f7ff ffbf 	bl	8000af4 <sbrk_aligned>
 8000b76:	1c43      	adds	r3, r0, #1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	d158      	bne.n	8000c2e <_malloc_r+0xf6>
 8000b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b80:	4627      	mov	r7, r4
 8000b82:	2f00      	cmp	r7, #0
 8000b84:	d143      	bne.n	8000c0e <_malloc_r+0xd6>
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d04b      	beq.n	8000c22 <_malloc_r+0xea>
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	4630      	mov	r0, r6
 8000b90:	eb04 0903 	add.w	r9, r4, r3
 8000b94:	f000 f86e 	bl	8000c74 <_sbrk_r>
 8000b98:	4581      	cmp	r9, r0
 8000b9a:	d142      	bne.n	8000c22 <_malloc_r+0xea>
 8000b9c:	6821      	ldr	r1, [r4, #0]
 8000b9e:	1a6d      	subs	r5, r5, r1
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f7ff ffa6 	bl	8000af4 <sbrk_aligned>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d03a      	beq.n	8000c22 <_malloc_r+0xea>
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	442b      	add	r3, r5
 8000bb0:	6023      	str	r3, [r4, #0]
 8000bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	bb62      	cbnz	r2, 8000c14 <_malloc_r+0xdc>
 8000bba:	f8c8 7000 	str.w	r7, [r8]
 8000bbe:	e00f      	b.n	8000be0 <_malloc_r+0xa8>
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	1b52      	subs	r2, r2, r5
 8000bc4:	d420      	bmi.n	8000c08 <_malloc_r+0xd0>
 8000bc6:	2a0b      	cmp	r2, #11
 8000bc8:	d917      	bls.n	8000bfa <_malloc_r+0xc2>
 8000bca:	1961      	adds	r1, r4, r5
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	6025      	str	r5, [r4, #0]
 8000bd0:	bf18      	it	ne
 8000bd2:	6059      	strne	r1, [r3, #4]
 8000bd4:	6863      	ldr	r3, [r4, #4]
 8000bd6:	bf08      	it	eq
 8000bd8:	f8c8 1000 	streq.w	r1, [r8]
 8000bdc:	5162      	str	r2, [r4, r5]
 8000bde:	604b      	str	r3, [r1, #4]
 8000be0:	4630      	mov	r0, r6
 8000be2:	f000 f82f 	bl	8000c44 <__malloc_unlock>
 8000be6:	f104 000b 	add.w	r0, r4, #11
 8000bea:	1d23      	adds	r3, r4, #4
 8000bec:	f020 0007 	bic.w	r0, r0, #7
 8000bf0:	1ac2      	subs	r2, r0, r3
 8000bf2:	bf1c      	itt	ne
 8000bf4:	1a1b      	subne	r3, r3, r0
 8000bf6:	50a3      	strne	r3, [r4, r2]
 8000bf8:	e7af      	b.n	8000b5a <_malloc_r+0x22>
 8000bfa:	6862      	ldr	r2, [r4, #4]
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	bf0c      	ite	eq
 8000c00:	f8c8 2000 	streq.w	r2, [r8]
 8000c04:	605a      	strne	r2, [r3, #4]
 8000c06:	e7eb      	b.n	8000be0 <_malloc_r+0xa8>
 8000c08:	4623      	mov	r3, r4
 8000c0a:	6864      	ldr	r4, [r4, #4]
 8000c0c:	e7ae      	b.n	8000b6c <_malloc_r+0x34>
 8000c0e:	463c      	mov	r4, r7
 8000c10:	687f      	ldr	r7, [r7, #4]
 8000c12:	e7b6      	b.n	8000b82 <_malloc_r+0x4a>
 8000c14:	461a      	mov	r2, r3
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	42a3      	cmp	r3, r4
 8000c1a:	d1fb      	bne.n	8000c14 <_malloc_r+0xdc>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	6053      	str	r3, [r2, #4]
 8000c20:	e7de      	b.n	8000be0 <_malloc_r+0xa8>
 8000c22:	230c      	movs	r3, #12
 8000c24:	6033      	str	r3, [r6, #0]
 8000c26:	4630      	mov	r0, r6
 8000c28:	f000 f80c 	bl	8000c44 <__malloc_unlock>
 8000c2c:	e794      	b.n	8000b58 <_malloc_r+0x20>
 8000c2e:	6005      	str	r5, [r0, #0]
 8000c30:	e7d6      	b.n	8000be0 <_malloc_r+0xa8>
 8000c32:	bf00      	nop
 8000c34:	200000c0 	.word	0x200000c0

08000c38 <__malloc_lock>:
 8000c38:	4801      	ldr	r0, [pc, #4]	@ (8000c40 <__malloc_lock+0x8>)
 8000c3a:	f000 b855 	b.w	8000ce8 <__retarget_lock_acquire_recursive>
 8000c3e:	bf00      	nop
 8000c40:	20000200 	.word	0x20000200

08000c44 <__malloc_unlock>:
 8000c44:	4801      	ldr	r0, [pc, #4]	@ (8000c4c <__malloc_unlock+0x8>)
 8000c46:	f000 b850 	b.w	8000cea <__retarget_lock_release_recursive>
 8000c4a:	bf00      	nop
 8000c4c:	20000200 	.word	0x20000200

08000c50 <strncmp>:
 8000c50:	b510      	push	{r4, lr}
 8000c52:	b16a      	cbz	r2, 8000c70 <strncmp+0x20>
 8000c54:	3901      	subs	r1, #1
 8000c56:	1884      	adds	r4, r0, r2
 8000c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d103      	bne.n	8000c6c <strncmp+0x1c>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	d001      	beq.n	8000c6c <strncmp+0x1c>
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d1f5      	bne.n	8000c58 <strncmp+0x8>
 8000c6c:	1ad0      	subs	r0, r2, r3
 8000c6e:	bd10      	pop	{r4, pc}
 8000c70:	4610      	mov	r0, r2
 8000c72:	e7fc      	b.n	8000c6e <strncmp+0x1e>

08000c74 <_sbrk_r>:
 8000c74:	b538      	push	{r3, r4, r5, lr}
 8000c76:	4d06      	ldr	r5, [pc, #24]	@ (8000c90 <_sbrk_r+0x1c>)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	602b      	str	r3, [r5, #0]
 8000c80:	f7ff fd76 	bl	8000770 <_sbrk>
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	d102      	bne.n	8000c8e <_sbrk_r+0x1a>
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	b103      	cbz	r3, 8000c8e <_sbrk_r+0x1a>
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	bd38      	pop	{r3, r4, r5, pc}
 8000c90:	200001fc 	.word	0x200001fc

08000c94 <__errno>:
 8000c94:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <__errno+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000044 	.word	0x20000044

08000ca0 <__libc_init_array>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8000cd8 <__libc_init_array+0x38>)
 8000ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8000cdc <__libc_init_array+0x3c>)
 8000ca6:	1b64      	subs	r4, r4, r5
 8000ca8:	10a4      	asrs	r4, r4, #2
 8000caa:	2600      	movs	r6, #0
 8000cac:	42a6      	cmp	r6, r4
 8000cae:	d109      	bne.n	8000cc4 <__libc_init_array+0x24>
 8000cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8000ce0 <__libc_init_array+0x40>)
 8000cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8000ce4 <__libc_init_array+0x44>)
 8000cb4:	f000 f81a 	bl	8000cec <_init>
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	42a6      	cmp	r6, r4
 8000cc0:	d105      	bne.n	8000cce <__libc_init_array+0x2e>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc8:	4798      	blx	r3
 8000cca:	3601      	adds	r6, #1
 8000ccc:	e7ee      	b.n	8000cac <__libc_init_array+0xc>
 8000cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd2:	4798      	blx	r3
 8000cd4:	3601      	adds	r6, #1
 8000cd6:	e7f2      	b.n	8000cbe <__libc_init_array+0x1e>
 8000cd8:	08000d28 	.word	0x08000d28
 8000cdc:	08000d28 	.word	0x08000d28
 8000ce0:	08000d28 	.word	0x08000d28
 8000ce4:	08000d2c 	.word	0x08000d2c

08000ce8 <__retarget_lock_acquire_recursive>:
 8000ce8:	4770      	bx	lr

08000cea <__retarget_lock_release_recursive>:
 8000cea:	4770      	bx	lr

08000cec <_init>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	bf00      	nop
 8000cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf2:	bc08      	pop	{r3}
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	4770      	bx	lr

08000cf8 <_fini>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	bf00      	nop
 8000cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfe:	bc08      	pop	{r3}
 8000d00:	469e      	mov	lr, r3
 8000d02:	4770      	bx	lr
