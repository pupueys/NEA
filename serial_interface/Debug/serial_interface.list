
serial_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000518  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000518  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08000520  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          0000001c  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007e3  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000322  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00002b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e02  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cda  00000000  00000000  00003a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075f05  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007a645  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000178  00000000  00000000  0007a688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0007a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000500 	.word	0x08000500

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000500 	.word	0x08000500

080001d4 <finished_transmission>:

#define TERMINATOR '!'
#define BUFFER_SIZE 64


void finished_transmission(uint32_t bytes_sent) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 80001e0:	2300      	movs	r3, #0
 80001e2:	60bb      	str	r3, [r7, #8]
 80001e4:	e002      	b.n	80001ec <finished_transmission+0x18>
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60bb      	str	r3, [r7, #8]
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4a05      	ldr	r2, [pc, #20]	@ (8000204 <finished_transmission+0x30>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d9f8      	bls.n	80001e6 <finished_transmission+0x12>
		// waste time !
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	0008fffe 	.word	0x0008fffe

08000208 <received_new_string>:

void received_new_string(uint8_t *buffer, uint32_t bytes_sent) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]

	// This function will be called after a full string is received
	SerialOutputString(buffer, &USART1_PORT);
 8000212:	4904      	ldr	r1, [pc, #16]	@ (8000224 <received_new_string+0x1c>)
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f000 f8ba 	bl	800038e <SerialOutputString>

}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000

08000228 <main>:

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0

 	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission, &received_new_string);
 800022e:	4b06      	ldr	r3, [pc, #24]	@ (8000248 <main+0x20>)
 8000230:	4a06      	ldr	r2, [pc, #24]	@ (800024c <main+0x24>)
 8000232:	4907      	ldr	r1, [pc, #28]	@ (8000250 <main+0x28>)
 8000234:	2004      	movs	r0, #4
 8000236:	f000 f80d 	bl	8000254 <SerialInitialise>

	uint8_t buffer[BUFFER_SIZE];

    /* Loop forever */
	for(;;) {
		SerialReceiveString(buffer, &USART1_PORT, BUFFER_SIZE, TERMINATOR);
 800023a:	4638      	mov	r0, r7
 800023c:	2321      	movs	r3, #33	@ 0x21
 800023e:	2240      	movs	r2, #64	@ 0x40
 8000240:	4903      	ldr	r1, [pc, #12]	@ (8000250 <main+0x28>)
 8000242:	f000 f8de 	bl	8000402 <SerialReceiveString>
 8000246:	e7f8      	b.n	800023a <main+0x12>
 8000248:	08000209 	.word	0x08000209
 800024c:	080001d5 	.word	0x080001d5
 8000250:	20000000 	.word	0x20000000

08000254 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*transmit_complete_function)(uint32_t),  void (*receive_complete_function)(uint8_t, uint32_t)) {
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
 8000260:	603b      	str	r3, [r7, #0]

	serial_port->transmit_complete_function = transmit_complete_function;
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_complete_function = receive_complete_function;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	683a      	ldr	r2, [r7, #0]
 800026c:	629a      	str	r2, [r3, #40]	@ 0x28


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800026e:	4b3a      	ldr	r3, [pc, #232]	@ (8000358 <SerialInitialise+0x104>)
 8000270:	69db      	ldr	r3, [r3, #28]
 8000272:	4a39      	ldr	r2, [pc, #228]	@ (8000358 <SerialInitialise+0x104>)
 8000274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000278:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <SerialInitialise+0x104>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <SerialInitialise+0x104>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	4b33      	ldr	r3, [pc, #204]	@ (8000358 <SerialInitialise+0x104>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4932      	ldr	r1, [pc, #200]	@ (8000358 <SerialInitialise+0x104>)
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	6952      	ldr	r2, [r2, #20]
 800029c:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	6992      	ldr	r2, [r2, #24]
 80002a6:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	69d9      	ldr	r1, [r3, #28]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	6a1a      	ldr	r2, [r3, #32]
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	430a      	orrs	r2, r1
 80002b8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	6a19      	ldr	r1, [r3, #32]
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <SerialInitialise+0x104>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4920      	ldr	r1, [pc, #128]	@ (8000358 <SerialInitialise+0x104>)
 80002d6:	4313      	orrs	r3, r2
 80002d8:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	689a      	ldr	r2, [r3, #8]
 80002de:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <SerialInitialise+0x104>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	491d      	ldr	r1, [pc, #116]	@ (8000358 <SerialInitialise+0x104>)
 80002e4:	4313      	orrs	r3, r2
 80002e6:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	330c      	adds	r3, #12
 80002ee:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	d822      	bhi.n	800033c <SerialInitialise+0xe8>
 80002f6:	a201      	add	r2, pc, #4	@ (adr r2, 80002fc <SerialInitialise+0xa8>)
 80002f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fc:	08000311 	.word	0x08000311
 8000300:	0800031b 	.word	0x0800031b
 8000304:	08000325 	.word	0x08000325
 8000308:	0800032d 	.word	0x0800032d
 800030c:	08000335 	.word	0x08000335
	case BAUD_9600:
		*baud_rate_config = 0x342;  // 9600 at 8MHz
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	f240 3242 	movw	r2, #834	@ 0x342
 8000316:	801a      	strh	r2, [r3, #0]
		break;
 8000318:	e010      	b.n	800033c <SerialInitialise+0xe8>
	case BAUD_19200:
		*baud_rate_config = 0x19C;  // 19200 at 8MHz
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8000320:	801a      	strh	r2, [r3, #0]
		break;
 8000322:	e00b      	b.n	800033c <SerialInitialise+0xe8>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	22d0      	movs	r2, #208	@ 0xd0
 8000328:	801a      	strh	r2, [r3, #0]
		break;
 800032a:	e007      	b.n	800033c <SerialInitialise+0xe8>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	228b      	movs	r2, #139	@ 0x8b
 8000330:	801a      	strh	r2, [r3, #0]
		break;
 8000332:	e003      	b.n	800033c <SerialInitialise+0xe8>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	2246      	movs	r2, #70	@ 0x46
 8000338:	801a      	strh	r2, [r3, #0]
		break;
 800033a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f042 022d 	orr.w	r2, r2, #45	@ 0x2d
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000

0800035c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000368:	bf00      	nop
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f8      	beq.n	800036a <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	b292      	uxth	r2, r2
 8000380:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800038e:	b580      	push	{r7, lr}
 8000390:	b084      	sub	sp, #16
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800039c:	e00b      	b.n	80003b6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ffd9 	bl	800035c <SerialOutputChar>
		counter++;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	3301      	adds	r3, #1
 80003ae:	60fb      	str	r3, [r7, #12]
		pt++;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1ef      	bne.n	800039e <SerialOutputString+0x10>
	}

	serial_port->transmit_complete_function(counter);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003c2:	68f8      	ldr	r0, [r7, #12]
 80003c4:	4798      	blx	r3
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <SerialReceiveChar>:

// Function to receive a character
void SerialReceiveChar(uint8_t *pt, SerialPort *serial_port) {
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]

	while((serial_port->UART->ISR & USART_ISR_RXNE) == 0){
 80003d8:	bf00      	nop
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0f8      	beq.n	80003da <SerialReceiveChar+0xc>
	}

	*pt = (uint8_t)(serial_port->UART->RDR);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	701a      	strb	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SerialReceiveString>:
//
//	//serial_port->receive_complete_function(buffer, counter);
//}


void SerialReceiveString(uint8_t *buffer, SerialPort *serial_port, uint8_t buffer_size, uint8_t terminator) {
 8000402:	b580      	push	{r7, lr}
 8000404:	b088      	sub	sp, #32
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	4611      	mov	r1, r2
 800040e:	461a      	mov	r2, r3
 8000410:	460b      	mov	r3, r1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	4613      	mov	r3, r2
 8000416:	71bb      	strb	r3, [r7, #6]

	uint8_t *buffer_base = buffer;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	61bb      	str	r3, [r7, #24]
	uint32_t counter = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
	char current_char = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	75fb      	strb	r3, [r7, #23]

	while (current_char != terminator) {
 8000424:	e013      	b.n	800044e <SerialReceiveString+0x4c>

		// Storing the read character into the buffer
		SerialReceiveChar(buffer, serial_port);
 8000426:	68b9      	ldr	r1, [r7, #8]
 8000428:	68f8      	ldr	r0, [r7, #12]
 800042a:	f7ff ffd0 	bl	80003ce <SerialReceiveChar>

		// Counting the amount of characters in the string
		counter++;
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	3301      	adds	r3, #1
 8000432:	61fb      	str	r3, [r7, #28]
		buffer++;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]

		if (counter == buffer_size) {
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	69fa      	ldr	r2, [r7, #28]
 800043e:	429a      	cmp	r2, r3
 8000440:	d104      	bne.n	800044c <SerialReceiveString+0x4a>
			buffer = buffer_base;
 8000442:	69bb      	ldr	r3, [r7, #24]
 8000444:	60fb      	str	r3, [r7, #12]
			counter = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
 800044a:	e000      	b.n	800044e <SerialReceiveString+0x4c>
		}
		else {
			continue;
 800044c:	bf00      	nop
	while (current_char != terminator) {
 800044e:	7dfa      	ldrb	r2, [r7, #23]
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	429a      	cmp	r2, r3
 8000454:	d1e7      	bne.n	8000426 <SerialReceiveString+0x24>
		}

	}

	buffer = buffer_base;
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	60fb      	str	r3, [r7, #12]

	//serial_port->receive_complete_function(buffer, counter);
}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	@ (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	@ (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	@ (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	@ (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	@ (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fec7 	bl	8000228 <main>

0800049a <LoopForever>:

LoopForever:
  b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80004b0:	20000048 	.word	0x20000048

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	@ (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	@ (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	@ (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	@ (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
