
Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000041c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b0  080005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005b4  080005b4  000015b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005b8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001296  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ea  00000000  00000000  000032ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  000037b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009a  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e65  00000000  00000000  0000393a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001051  00000000  00000000  0001879f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072816  00000000  00000000  000197f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008c006  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000260  00000000  00000000  0008c04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0008c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000598 	.word	0x08000598

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000598 	.word	0x08000598

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <enable_clocks>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*on_button_press)() = 0x00;

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000268:	4b08      	ldr	r3, [pc, #32]	@ (800028c <enable_clocks+0x28>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a07      	ldr	r2, [pc, #28]	@ (800028c <enable_clocks+0x28>)
 800026e:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000272:	6153      	str	r3, [r2, #20]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;           // enable clock for timer 3
 8000274:	4b05      	ldr	r3, [pc, #20]	@ (800028c <enable_clocks+0x28>)
 8000276:	69db      	ldr	r3, [r3, #28]
 8000278:	4a04      	ldr	r2, [pc, #16]	@ (800028c <enable_clocks+0x28>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	61d3      	str	r3, [r2, #28]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <initialise_board+0x20>)
 8000298:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002a0:	801a      	strh	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	48001002 	.word	0x48001002

080002b4 <enable_interrupt>:


void enable_interrupt() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b8:	b672      	cpsid	i
}
 80002ba:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <enable_interrupt+0x48>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	@ (80002fc <enable_interrupt+0x48>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <enable_interrupt+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 80002ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <enable_interrupt+0x50>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <enable_interrupt+0x50>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 80002da:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <enable_interrupt+0x50>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a09      	ldr	r2, [pc, #36]	@ (8000304 <enable_interrupt+0x50>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff91 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002ee:	2006      	movs	r0, #6
 80002f0:	f7ff ff70 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002f4:	b662      	cpsie	i
}
 80002f6:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010000 	.word	0x40010000
 8000304:	40010400 	.word	0x40010400

08000308 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    button_pressed_flag = 1;  // Mark that button was pressed
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <EXTI0_IRQHandler+0x28>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <EXTI0_IRQHandler+0x2c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <EXTI0_IRQHandler+0x18>
		on_button_press();
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <EXTI0_IRQHandler+0x2c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <EXTI0_IRQHandler+0x30>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <EXTI0_IRQHandler+0x30>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6153      	str	r3, [r2, #20]
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000025 	.word	0x20000025
 8000334:	20000020 	.word	0x20000020
 8000338:	40010400 	.word	0x40010400

0800033c <digital_io>:


// Accept callback function in digital_io
void digital_io(callback chase_led) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	on_button_press = chase_led;             // on_button_press is assigned to callback function chase_led
 8000344:	4a07      	ldr	r2, [pc, #28]	@ (8000364 <digital_io+0x28>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6013      	str	r3, [r2, #0]
	enable_clocks();                         // enable the clocks
 800034a:	f7ff ff8b 	bl	8000264 <enable_clocks>
	initialise_board();                      // initialise the boards
 800034e:	f7ff ff9f 	bl	8000290 <initialise_board>
	enable_button_interrupt();
 8000352:	f000 f889 	bl	8000468 <enable_button_interrupt>
	enable_interrupt();                      // enable the button press interrupt
 8000356:	f7ff ffad 	bl	80002b4 <enable_interrupt>
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000020 	.word	0x20000020

08000368 <chase_led>:


void chase_led() {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    if (led_change_flag==1) {
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <chase_led+0x50>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b01      	cmp	r3, #1
 8000374:	d11b      	bne.n	80003ae <chase_led+0x46>
        led_state <<= 1;  // Move to the next LED
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <chase_led+0x54>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <chase_led+0x54>)
 8000382:	701a      	strb	r2, [r3, #0]
        if (led_state == 0) {
 8000384:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <chase_led+0x54>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d102      	bne.n	8000394 <chase_led+0x2c>
            led_state = 1;  // Reset to the first LED if all LEDs are off
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <chase_led+0x54>)
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
        }
        GPIOE->ODR = (GPIOE->ODR & 0x00FF) | (led_state << 8);  // Update hardware
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <chase_led+0x58>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <chase_led+0x54>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	021b      	lsls	r3, r3, #8
 80003a2:	4907      	ldr	r1, [pc, #28]	@ (80003c0 <chase_led+0x58>)
 80003a4:	4313      	orrs	r3, r2
 80003a6:	614b      	str	r3, [r1, #20]
        led_change_flag = 0;  // Reset the flag
 80003a8:	4b03      	ldr	r3, [pc, #12]	@ (80003b8 <chase_led+0x50>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
    }
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	20000024 	.word	0x20000024
 80003bc:	20000000 	.word	0x20000000
 80003c0:	48001000 	.word	0x48001000

080003c4 <main>:
#include <stdint.h>
#include "stm32f303xc.h"
#include "timer.h"

int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    //set_led_state(3);                          //uncomment this to test setting the LED state for part 3
	digital_io(&chase_led);                   //Address of the callback function is passed on the initialisation function
 80003c8:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <main+0x10>)
 80003ca:	f7ff ffb7 	bl	800033c <digital_io>


	for(;;) {}
 80003ce:	bf00      	nop
 80003d0:	e7fd      	b.n	80003ce <main+0xa>
 80003d2:	bf00      	nop
 80003d4:	08000369 	.word	0x08000369

080003d8 <__NVIC_EnableIRQ>:
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db0b      	blt.n	8000402 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	f003 021f 	and.w	r2, r3, #31
 80003f0:	4907      	ldr	r1, [pc, #28]	@ (8000410 <__NVIC_EnableIRQ+0x38>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	095b      	lsrs	r3, r3, #5
 80003f8:	2001      	movs	r0, #1
 80003fa:	fa00 f202 	lsl.w	r2, r0, r2
 80003fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e100 	.word	0xe000e100

08000414 <__NVIC_SetPriority>:
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	6039      	str	r1, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db0a      	blt.n	800043e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	490c      	ldr	r1, [pc, #48]	@ (8000460 <__NVIC_SetPriority+0x4c>)
 800042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000432:	0112      	lsls	r2, r2, #4
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	440b      	add	r3, r1
 8000438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800043c:	e00a      	b.n	8000454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4908      	ldr	r1, [pc, #32]	@ (8000464 <__NVIC_SetPriority+0x50>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	f003 030f 	and.w	r3, r3, #15
 800044a:	3b04      	subs	r3, #4
 800044c:	0112      	lsls	r2, r2, #4
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	440b      	add	r3, r1
 8000452:	761a      	strb	r2, [r3, #24]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	e000e100 	.word	0xe000e100
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <enable_button_interrupt>:

//timer for part 4
volatile uint8_t led_change_flag = 0;
volatile uint8_t button_pressed_flag = 0;

void enable_button_interrupt() {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();
    // Configure Timer 3 for periodic interrupt
    TIM3->PSC = 16000 - 1; // Prescaler for 1ms ticks (assuming 16 MHz clock)
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <enable_button_interrupt+0x48>)
 8000472:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1; // Auto-reload for 500ms interval (every 500ms)
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <enable_button_interrupt+0x48>)
 800047a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800047e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <enable_button_interrupt+0x48>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <enable_button_interrupt+0x48>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN; // Start the timer
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <enable_button_interrupt+0x48>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a07      	ldr	r2, [pc, #28]	@ (80004b0 <enable_button_interrupt+0x48>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM3_IRQn, 2);  // Set Priority
 8000498:	2102      	movs	r1, #2
 800049a:	201d      	movs	r0, #29
 800049c:	f7ff ffba 	bl	8000414 <__NVIC_SetPriority>

    NVIC_EnableIRQ(TIM3_IRQn);  // Enable Timer 3 interrupt
 80004a0:	201d      	movs	r0, #29
 80004a2:	f7ff ff99 	bl	80003d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004a6:	b662      	cpsie	i
}
 80004a8:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40000400 	.word	0x40000400

080004b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <TIM3_IRQHandler+0x3c>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d010      	beq.n	80004e6 <TIM3_IRQHandler+0x32>
        TIM3->SR &= ~TIM_SR_UIF;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <TIM3_IRQHandler+0x3c>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4a09      	ldr	r2, [pc, #36]	@ (80004f0 <TIM3_IRQHandler+0x3c>)
 80004ca:	f023 0301 	bic.w	r3, r3, #1
 80004ce:	6113      	str	r3, [r2, #16]

        if (button_pressed_flag) {
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <TIM3_IRQHandler+0x40>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d005      	beq.n	80004e6 <TIM3_IRQHandler+0x32>
            led_change_flag = 1;
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <TIM3_IRQHandler+0x44>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
            button_pressed_flag = 0;  // Clear the flag after use
 80004e0:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <TIM3_IRQHandler+0x40>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40000400 	.word	0x40000400
 80004f4:	20000025 	.word	0x20000025
 80004f8:	20000024 	.word	0x20000024

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	@ (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	@ (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	@ (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f811 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ff49 	bl	80003c4 <main>

08000532 <LoopForever>:

LoopForever:
  b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000540:	080005b8 	.word	0x080005b8
  ldr r2, =_sbss
 8000544:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000548:	20000028 	.word	0x20000028

0800054c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_2_IRQHandler>
	...

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	4d0d      	ldr	r5, [pc, #52]	@ (8000588 <__libc_init_array+0x38>)
 8000554:	4c0d      	ldr	r4, [pc, #52]	@ (800058c <__libc_init_array+0x3c>)
 8000556:	1b64      	subs	r4, r4, r5
 8000558:	10a4      	asrs	r4, r4, #2
 800055a:	2600      	movs	r6, #0
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	4d0b      	ldr	r5, [pc, #44]	@ (8000590 <__libc_init_array+0x40>)
 8000562:	4c0c      	ldr	r4, [pc, #48]	@ (8000594 <__libc_init_array+0x44>)
 8000564:	f000 f818 	bl	8000598 <_init>
 8000568:	1b64      	subs	r4, r4, r5
 800056a:	10a4      	asrs	r4, r4, #2
 800056c:	2600      	movs	r6, #0
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f855 3b04 	ldr.w	r3, [r5], #4
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005b0 	.word	0x080005b0
 800058c:	080005b0 	.word	0x080005b0
 8000590:	080005b0 	.word	0x080005b0
 8000594:	080005b4 	.word	0x080005b4

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
