
IntegrationEthan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000818  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080009ac  080009ac  000019ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009bc  080009bc  00002094  2**0
                  CONTENTS
  4 .ARM          00000000  080009bc  080009bc  00002094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009bc  080009bc  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000019bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009c0  080009c0  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080009c4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002094  2**0
                  CONTENTS
 10 .bss          00000168  20000094  20000094  00002094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00002094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dbb  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009d7  00000000  00000000  00003e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f4  00000000  00000000  000049d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165ba  00000000  00000000  00004ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cfe  00000000  00000000  0001b07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000769f4  00000000  00000000  0001dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00094770  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006ec  00000000  00000000  000947b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00094ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000094 	.word	0x20000094
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000994 	.word	0x08000994

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000098 	.word	0x20000098
 80001d0:	08000994 	.word	0x08000994

080001d4 <enable_clocks>:
#include "stm32f303xc.h"
#include "set_get_leds.h"


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_clocks+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_clocks+0x1c>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <led_case>:

uint8_t led_case(char *restofwords) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]

    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 8000228:	e00f      	b.n	800024a <led_case+0x32>
        value <<= 1; // Shift left
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	73fb      	strb	r3, [r7, #15]
        if (restofwords[i] == '1') {
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b31      	cmp	r3, #49	@ 0x31
 800023a:	d103      	bne.n	8000244 <led_case+0x2c>
            value |= 1;
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	73fb      	strb	r3, [r7, #15]
        }
        i++;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	3301      	adds	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d002      	beq.n	800025c <led_case+0x44>
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b07      	cmp	r3, #7
 800025a:	dde6      	ble.n	800022a <led_case+0x12>
    }

    return value;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <USART1_EXTI25_IRQHandler>:
#include "interrupts.h"

#define TERMINATOR '\0'

void USART1_EXTI25_IRQHandler(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	/*  Handler for the USART1 interrupts
	 *  Activates rx_function if interrupt is triggered
	 	Activates tx_function when transmit interrupt is triggered */

	// when interrupt is reached, call the rx_function
	rx_function(&USART1_PORT);
 8000270:	4806      	ldr	r0, [pc, #24]	@ (800028c <USART1_EXTI25_IRQHandler+0x20>)
 8000272:	f000 f80f 	bl	8000294 <rx_function>

	// transmit if and only if the transmit interrupt TXEIE is triggered
	if (!(USART1->CR1 & USART_CR1_TXEIE) == 0) {
 8000276:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <USART1_EXTI25_IRQHandler+0x24>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800027e:	2b00      	cmp	r3, #0
 8000280:	d002      	beq.n	8000288 <USART1_EXTI25_IRQHandler+0x1c>
		tx_function(&USART1_PORT);
 8000282:	4802      	ldr	r0, [pc, #8]	@ (800028c <USART1_EXTI25_IRQHandler+0x20>)
 8000284:	f000 f8a3 	bl	80003ce <tx_function>
	}
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000000 	.word	0x20000000
 8000290:	40013800 	.word	0x40013800

08000294 <rx_function>:

void rx_function(SerialPort *serial_port) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	/* This function is called when the RXNE interrupt is triggered.
	 * If the buffer is filled, the double buffers will switch, with the second buffer
	 * being able to receive, while the other buffer can be used */

	// checking if receiving is working properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	f003 0320 	and.w	r3, r3, #32
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d050      	beq.n	800034c <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	69db      	ldr	r3, [r3, #28]
 80002b0:	f003 0308 	and.w	r3, r3, #8
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d149      	bne.n	800034c <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_FE) == 0)  {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	f003 0302 	and.w	r3, r3, #2
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d142      	bne.n	800034c <rx_function+0xb8>

		// reading the character into the buffer
		serial_port->Buffer[serial_port->Count] = (uint8_t)(serial_port->UART->RDR);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80002cc:	b299      	uxth	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002d6:	4413      	add	r3, r2
 80002d8:	b2ca      	uxtb	r2, r1
 80002da:	701a      	strb	r2, [r3, #0]
		serial_port->Count++;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	62da      	str	r2, [r3, #44]	@ 0x2c

		// if the buffer has been filled, append the terminating character
		if (serial_port->Count + 1 == serial_port->BufferSize) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d10b      	bne.n	800030c <rx_function+0x78>

			serial_port->Buffer[serial_port->Count] = TERMINATOR;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002fc:	4413      	add	r3, r2
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
			serial_port->Count++;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000306:	1c5a      	adds	r2, r3, #1
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}

		// if the terminating character has been read, reading is complete and callback occurs
		// (extension) swap the buffers
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000314:	3b01      	subs	r3, #1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d11e      	bne.n	800035e <rx_function+0xca>

			volatile uint8_t* temp_pt = serial_port->Buffer;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000324:	60fb      	str	r3, [r7, #12]
			serial_port->Buffer = serial_port->SecondBuffer;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	625a      	str	r2, [r3, #36]	@ 0x24
			serial_port->SecondBuffer = temp_pt;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	629a      	str	r2, [r3, #40]	@ 0x28

			// callback with the first buffer since the first buffer is finished reading
			serial_port->callback(serial_port->SecondBuffer, serial_port->Count);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000340:	4611      	mov	r1, r2
 8000342:	4798      	blx	r3
			serial_port->Count = 0;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 800034a:	e008      	b.n	800035e <rx_function+0xca>
		}

	}	else {
		// clear error flags
			serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6a1a      	ldr	r2, [r3, #32]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f042 020a 	orr.w	r2, r2, #10
 800035a:	621a      	str	r2, [r3, #32]

	}

}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <tx_enable>:

void tx_enable(bool flag, SerialPort *serial_port) {
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	4603      	mov	r3, r0
 800036e:	6039      	str	r1, [r7, #0]
 8000370:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
	/* Given a flag, the transmission interrupt will be enabled/disabled */
	__disable_irq();

	if (flag == true) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d008      	beq.n	800038e <tx_enable+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	e007      	b.n	800039e <tx_enable+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800039c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800039e:	b662      	cpsie	i
}
 80003a0:	bf00      	nop
	}

	__enable_irq();
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <tx_string>:

void tx_string(uint8_t *str, SerialPort *serial_port) {
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]

	serial_port->TxPointer = str;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	635a      	str	r2, [r3, #52]	@ 0x34
	tx_enable(true, serial_port);
 80003be:	6839      	ldr	r1, [r7, #0]
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff ffd0 	bl	8000366 <tx_enable>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <tx_function>:

void tx_function(SerialPort *serial_port) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	/* This function is called when the TXE interrupt is enabled.
	   If this was triggered intentionally, a character will be placed in the TDR
	 */

	// checking for terminating character
	if (*(serial_port->TxPointer) == TERMINATOR) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d107      	bne.n	80003f2 <tx_function+0x24>

		serial_port->UART->TDR = TERMINATOR;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2200      	movs	r2, #0
 80003e8:	851a      	strh	r2, [r3, #40]	@ 0x28
		tx_enable(false, serial_port);
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ffba 	bl	8000366 <tx_enable>
	}



	// transmit character
	serial_port->UART->TDR = *serial_port->TxPointer;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	851a      	strh	r2, [r3, #40]	@ 0x28
	serial_port->TxPointer++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <main>:

    return value;

}

int main() {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	SerialInitialise(BUFFER_SIZE, BAUD_115200, &USART1_PORT, &parse_buffer);
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <main+0x14>)
 800041a:	4a04      	ldr	r2, [pc, #16]	@ (800042c <main+0x18>)
 800041c:	2104      	movs	r1, #4
 800041e:	2080      	movs	r0, #128	@ 0x80
 8000420:	f000 f886 	bl	8000530 <SerialInitialise>
//
//    }
//
//    for (volatile int j = 0; j < 1000000; j++);

	for (;;) {
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <main+0x10>
 8000428:	08000431 	.word	0x08000431
 800042c:	20000000 	.word	0x20000000

08000430 <parse_buffer>:
#include "parse.h"

void parse_buffer(volatile uint8_t *buffer, uint32_t size) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]

	/*  This callback function parses through the buffer
	 *  to determine what is required to be done.
	 */

	if ((size >= 7 && strncmp((volatile uint8_t*)buffer, "serial ", 7) == 0)) {
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	2b06      	cmp	r3, #6
 800043e:	d90e      	bls.n	800045e <parse_buffer+0x2e>
 8000440:	2207      	movs	r2, #7
 8000442:	4914      	ldr	r1, [pc, #80]	@ (8000494 <parse_buffer+0x64>)
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 fa57 	bl	80008f8 <strncmp>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d106      	bne.n	800045e <parse_buffer+0x2e>

		tx_string((volatile uint8_t*)buffer + 7, &USART1_PORT);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3307      	adds	r3, #7
 8000454:	4910      	ldr	r1, [pc, #64]	@ (8000498 <parse_buffer+0x68>)
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ffa9 	bl	80003ae <tx_string>
		return;
 800045c:	e016      	b.n	800048c <parse_buffer+0x5c>
	}

	if ((strncmp(buffer, "led ", 4) == 0)) {
 800045e:	2204      	movs	r2, #4
 8000460:	490e      	ldr	r1, [pc, #56]	@ (800049c <parse_buffer+0x6c>)
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 fa48 	bl	80008f8 <strncmp>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d10e      	bne.n	800048c <parse_buffer+0x5c>

                uint8_t led_pattern = led_case(buffer + 4);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3304      	adds	r3, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fed0 	bl	8000218 <led_case>
 8000478:	4603      	mov	r3, r0
 800047a:	73fb      	strb	r3, [r7, #15]
                enable_clocks();                         // enable the clocks
 800047c:	f7ff feaa 	bl	80001d4 <enable_clocks>
                initialise_board();                      // initialise the boards
 8000480:	f7ff feb8 	bl	80001f4 <initialise_board>
                set_led_state(led_pattern);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f908 	bl	800069c <set_led_state>
	}

}
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	080009ac 	.word	0x080009ac
 8000498:	20000000 	.word	0x20000000
 800049c:	080009b4 	.word	0x080009b4

080004a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	db0b      	blt.n	80004ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 021f 	and.w	r2, r3, #31
 80004b8:	4907      	ldr	r1, [pc, #28]	@ (80004d8 <__NVIC_EnableIRQ+0x38>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	095b      	lsrs	r3, r3, #5
 80004c0:	2001      	movs	r0, #1
 80004c2:	fa00 f202 	lsl.w	r2, r0, r2
 80004c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000e100 	.word	0xe000e100

080004dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	db0a      	blt.n	8000506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	490c      	ldr	r1, [pc, #48]	@ (8000528 <__NVIC_SetPriority+0x4c>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	0112      	lsls	r2, r2, #4
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	440b      	add	r3, r1
 8000500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000504:	e00a      	b.n	800051c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4908      	ldr	r1, [pc, #32]	@ (800052c <__NVIC_SetPriority+0x50>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 030f 	and.w	r3, r3, #15
 8000512:	3b04      	subs	r3, #4
 8000514:	0112      	lsls	r2, r2, #4
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	440b      	add	r3, r1
 800051a:	761a      	strb	r2, [r3, #24]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <SerialInitialise>:
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rx_complete)(volatile uint8_t*, uint32_t)) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
	// baudRate: the serial baud rate
	// serial_port: address of the serial port to initialise
	// rx_complete_function: pointer to callback function; inputs are pointer to string buffer
	//						 and length of the stored string respectively

	serial_port->callback = rx_complete;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	63da      	str	r2, [r3, #60]	@ 0x3c


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000544:	4b54      	ldr	r3, [pc, #336]	@ (8000698 <SerialInitialise+0x168>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	4a53      	ldr	r2, [pc, #332]	@ (8000698 <SerialInitialise+0x168>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000550:	4b51      	ldr	r3, [pc, #324]	@ (8000698 <SerialInitialise+0x168>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a50      	ldr	r2, [pc, #320]	@ (8000698 <SerialInitialise+0x168>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	691a      	ldr	r2, [r3, #16]
 8000560:	4b4d      	ldr	r3, [pc, #308]	@ (8000698 <SerialInitialise+0x168>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	494c      	ldr	r1, [pc, #304]	@ (8000698 <SerialInitialise+0x168>)
 8000566:	4313      	orrs	r3, r2
 8000568:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	6952      	ldr	r2, [r2, #20]
 8000572:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	6992      	ldr	r2, [r2, #24]
 800057c:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	69d9      	ldr	r1, [r3, #28]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	6a1a      	ldr	r2, [r3, #32]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	430a      	orrs	r2, r1
 800058e:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6a19      	ldr	r1, [r3, #32]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	430a      	orrs	r2, r1
 80005a0:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68da      	ldr	r2, [r3, #12]
 80005a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <SerialInitialise+0x168>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	493b      	ldr	r1, [pc, #236]	@ (8000698 <SerialInitialise+0x168>)
 80005ac:	4313      	orrs	r3, r2
 80005ae:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <SerialInitialise+0x168>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4937      	ldr	r1, [pc, #220]	@ (8000698 <SerialInitialise+0x168>)
 80005ba:	4313      	orrs	r3, r2
 80005bc:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	330c      	adds	r3, #12
 80005c4:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d823      	bhi.n	8000614 <SerialInitialise+0xe4>
 80005cc:	a201      	add	r2, pc, #4	@ (adr r2, 80005d4 <SerialInitialise+0xa4>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005f3 	.word	0x080005f3
 80005dc:	080005fd 	.word	0x080005fd
 80005e0:	08000605 	.word	0x08000605
 80005e4:	0800060d 	.word	0x0800060d
	case BAUD_9600:
		*baud_rate_config = 0x342;  // 9600 at 8MHz
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	f240 3242 	movw	r2, #834	@ 0x342
 80005ee:	801a      	strh	r2, [r3, #0]
		break;
 80005f0:	e010      	b.n	8000614 <SerialInitialise+0xe4>
	case BAUD_19200:
		*baud_rate_config = 0x19C;  // 19200 at 8MHz
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80005f8:	801a      	strh	r2, [r3, #0]
		break;
 80005fa:	e00b      	b.n	8000614 <SerialInitialise+0xe4>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	22d0      	movs	r2, #208	@ 0xd0
 8000600:	801a      	strh	r2, [r3, #0]
		break;
 8000602:	e007      	b.n	8000614 <SerialInitialise+0xe4>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	228b      	movs	r2, #139	@ 0x8b
 8000608:	801a      	strh	r2, [r3, #0]
		break;
 800060a:	e003      	b.n	8000614 <SerialInitialise+0xe4>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	2246      	movs	r2, #70	@ 0x46
 8000610:	801a      	strh	r2, [r3, #0]
		break;
 8000612:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f042 020d 	orr.w	r2, r2, #13
 8000622:	601a      	str	r2, [r3, #0]

	// configuring buffers
	serial_port->BufferSize = buffer_size;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	631a      	str	r2, [r3, #48]	@ 0x30
	serial_port->Buffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f8ac 	bl	800078c <malloc>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->SecondBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f8a3 	bl	800078c <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
}
 8000650:	bf00      	nop

	__disable_irq(); // disable all interrupts while changing settings

	// enabling the interrupts
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;		// enabling RXNE interrupts
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f042 0220 	orr.w	r2, r2, #32
 8000660:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;		// enabling the error interrupts
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 0201 	orr.w	r2, r2, #1
 8000670:	609a      	str	r2, [r3, #8]

	// activating interrupts and setting priority
	NVIC_SetPriority(serial_port->UART_IRQn, 5);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000676:	b25b      	sxtb	r3, r3
 8000678:	2105      	movs	r1, #5
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff2e 	bl	80004dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);			//  enable UART interrupts
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000684:	b25b      	sxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff0a 	bl	80004a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800068c:	b662      	cpsie	i
}
 800068e:	bf00      	nop

	__enable_irq(); // re-enable all interrupts

}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <set_led_state>:
uint8_t get_led_state(void) {
	return led_state;                         // return the current led state stored in led_state
}

// Set the LED state manually
void set_led_state(uint8_t state) {                // pass in a uint8_t value which represents the LED state
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	led_state = state;                             // set the input of the function to the led_state
 80006a6:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <set_led_state+0x28>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	7013      	strb	r3, [r2, #0]
	*((uint8_t*)&(GPIOE->ODR) + 1) = led_state;    // update the LED state to the ODR
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <set_led_state+0x2c>)
 80006ae:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <set_led_state+0x28>)
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000040 	.word	0x20000040
 80006c8:	48001015 	.word	0x48001015

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f000 f91e 	bl	800093c <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000a000 	.word	0x2000a000
 800072c:	00000400 	.word	0x00000400
 8000730:	200000b0 	.word	0x200000b0
 8000734:	20000200 	.word	0x20000200

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	@ (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	@ (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	@ (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 f8ef 	bl	8000948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fe53 	bl	8000414 <main>

0800076e <LoopForever>:

LoopForever:
  b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800077c:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 8000780:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000784:	200001fc 	.word	0x200001fc

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <malloc>:
 800078c:	4b02      	ldr	r3, [pc, #8]	@ (8000798 <malloc+0xc>)
 800078e:	4601      	mov	r1, r0
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f000 b825 	b.w	80007e0 <_malloc_r>
 8000796:	bf00      	nop
 8000798:	20000044 	.word	0x20000044

0800079c <sbrk_aligned>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4e0f      	ldr	r6, [pc, #60]	@ (80007dc <sbrk_aligned+0x40>)
 80007a0:	460c      	mov	r4, r1
 80007a2:	6831      	ldr	r1, [r6, #0]
 80007a4:	4605      	mov	r5, r0
 80007a6:	b911      	cbnz	r1, 80007ae <sbrk_aligned+0x12>
 80007a8:	f000 f8b8 	bl	800091c <_sbrk_r>
 80007ac:	6030      	str	r0, [r6, #0]
 80007ae:	4621      	mov	r1, r4
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 f8b3 	bl	800091c <_sbrk_r>
 80007b6:	1c43      	adds	r3, r0, #1
 80007b8:	d103      	bne.n	80007c2 <sbrk_aligned+0x26>
 80007ba:	f04f 34ff 	mov.w	r4, #4294967295
 80007be:	4620      	mov	r0, r4
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	1cc4      	adds	r4, r0, #3
 80007c4:	f024 0403 	bic.w	r4, r4, #3
 80007c8:	42a0      	cmp	r0, r4
 80007ca:	d0f8      	beq.n	80007be <sbrk_aligned+0x22>
 80007cc:	1a21      	subs	r1, r4, r0
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 f8a4 	bl	800091c <_sbrk_r>
 80007d4:	3001      	adds	r0, #1
 80007d6:	d1f2      	bne.n	80007be <sbrk_aligned+0x22>
 80007d8:	e7ef      	b.n	80007ba <sbrk_aligned+0x1e>
 80007da:	bf00      	nop
 80007dc:	200000b4 	.word	0x200000b4

080007e0 <_malloc_r>:
 80007e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e4:	1ccd      	adds	r5, r1, #3
 80007e6:	f025 0503 	bic.w	r5, r5, #3
 80007ea:	3508      	adds	r5, #8
 80007ec:	2d0c      	cmp	r5, #12
 80007ee:	bf38      	it	cc
 80007f0:	250c      	movcc	r5, #12
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	4606      	mov	r6, r0
 80007f6:	db01      	blt.n	80007fc <_malloc_r+0x1c>
 80007f8:	42a9      	cmp	r1, r5
 80007fa:	d904      	bls.n	8000806 <_malloc_r+0x26>
 80007fc:	230c      	movs	r3, #12
 80007fe:	6033      	str	r3, [r6, #0]
 8000800:	2000      	movs	r0, #0
 8000802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008dc <_malloc_r+0xfc>
 800080a:	f000 f869 	bl	80008e0 <__malloc_lock>
 800080e:	f8d8 3000 	ldr.w	r3, [r8]
 8000812:	461c      	mov	r4, r3
 8000814:	bb44      	cbnz	r4, 8000868 <_malloc_r+0x88>
 8000816:	4629      	mov	r1, r5
 8000818:	4630      	mov	r0, r6
 800081a:	f7ff ffbf 	bl	800079c <sbrk_aligned>
 800081e:	1c43      	adds	r3, r0, #1
 8000820:	4604      	mov	r4, r0
 8000822:	d158      	bne.n	80008d6 <_malloc_r+0xf6>
 8000824:	f8d8 4000 	ldr.w	r4, [r8]
 8000828:	4627      	mov	r7, r4
 800082a:	2f00      	cmp	r7, #0
 800082c:	d143      	bne.n	80008b6 <_malloc_r+0xd6>
 800082e:	2c00      	cmp	r4, #0
 8000830:	d04b      	beq.n	80008ca <_malloc_r+0xea>
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	4639      	mov	r1, r7
 8000836:	4630      	mov	r0, r6
 8000838:	eb04 0903 	add.w	r9, r4, r3
 800083c:	f000 f86e 	bl	800091c <_sbrk_r>
 8000840:	4581      	cmp	r9, r0
 8000842:	d142      	bne.n	80008ca <_malloc_r+0xea>
 8000844:	6821      	ldr	r1, [r4, #0]
 8000846:	1a6d      	subs	r5, r5, r1
 8000848:	4629      	mov	r1, r5
 800084a:	4630      	mov	r0, r6
 800084c:	f7ff ffa6 	bl	800079c <sbrk_aligned>
 8000850:	3001      	adds	r0, #1
 8000852:	d03a      	beq.n	80008ca <_malloc_r+0xea>
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	442b      	add	r3, r5
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	f8d8 3000 	ldr.w	r3, [r8]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	bb62      	cbnz	r2, 80008bc <_malloc_r+0xdc>
 8000862:	f8c8 7000 	str.w	r7, [r8]
 8000866:	e00f      	b.n	8000888 <_malloc_r+0xa8>
 8000868:	6822      	ldr	r2, [r4, #0]
 800086a:	1b52      	subs	r2, r2, r5
 800086c:	d420      	bmi.n	80008b0 <_malloc_r+0xd0>
 800086e:	2a0b      	cmp	r2, #11
 8000870:	d917      	bls.n	80008a2 <_malloc_r+0xc2>
 8000872:	1961      	adds	r1, r4, r5
 8000874:	42a3      	cmp	r3, r4
 8000876:	6025      	str	r5, [r4, #0]
 8000878:	bf18      	it	ne
 800087a:	6059      	strne	r1, [r3, #4]
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	bf08      	it	eq
 8000880:	f8c8 1000 	streq.w	r1, [r8]
 8000884:	5162      	str	r2, [r4, r5]
 8000886:	604b      	str	r3, [r1, #4]
 8000888:	4630      	mov	r0, r6
 800088a:	f000 f82f 	bl	80008ec <__malloc_unlock>
 800088e:	f104 000b 	add.w	r0, r4, #11
 8000892:	1d23      	adds	r3, r4, #4
 8000894:	f020 0007 	bic.w	r0, r0, #7
 8000898:	1ac2      	subs	r2, r0, r3
 800089a:	bf1c      	itt	ne
 800089c:	1a1b      	subne	r3, r3, r0
 800089e:	50a3      	strne	r3, [r4, r2]
 80008a0:	e7af      	b.n	8000802 <_malloc_r+0x22>
 80008a2:	6862      	ldr	r2, [r4, #4]
 80008a4:	42a3      	cmp	r3, r4
 80008a6:	bf0c      	ite	eq
 80008a8:	f8c8 2000 	streq.w	r2, [r8]
 80008ac:	605a      	strne	r2, [r3, #4]
 80008ae:	e7eb      	b.n	8000888 <_malloc_r+0xa8>
 80008b0:	4623      	mov	r3, r4
 80008b2:	6864      	ldr	r4, [r4, #4]
 80008b4:	e7ae      	b.n	8000814 <_malloc_r+0x34>
 80008b6:	463c      	mov	r4, r7
 80008b8:	687f      	ldr	r7, [r7, #4]
 80008ba:	e7b6      	b.n	800082a <_malloc_r+0x4a>
 80008bc:	461a      	mov	r2, r3
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	42a3      	cmp	r3, r4
 80008c2:	d1fb      	bne.n	80008bc <_malloc_r+0xdc>
 80008c4:	2300      	movs	r3, #0
 80008c6:	6053      	str	r3, [r2, #4]
 80008c8:	e7de      	b.n	8000888 <_malloc_r+0xa8>
 80008ca:	230c      	movs	r3, #12
 80008cc:	6033      	str	r3, [r6, #0]
 80008ce:	4630      	mov	r0, r6
 80008d0:	f000 f80c 	bl	80008ec <__malloc_unlock>
 80008d4:	e794      	b.n	8000800 <_malloc_r+0x20>
 80008d6:	6005      	str	r5, [r0, #0]
 80008d8:	e7d6      	b.n	8000888 <_malloc_r+0xa8>
 80008da:	bf00      	nop
 80008dc:	200000b8 	.word	0x200000b8

080008e0 <__malloc_lock>:
 80008e0:	4801      	ldr	r0, [pc, #4]	@ (80008e8 <__malloc_lock+0x8>)
 80008e2:	f000 b855 	b.w	8000990 <__retarget_lock_acquire_recursive>
 80008e6:	bf00      	nop
 80008e8:	200001f8 	.word	0x200001f8

080008ec <__malloc_unlock>:
 80008ec:	4801      	ldr	r0, [pc, #4]	@ (80008f4 <__malloc_unlock+0x8>)
 80008ee:	f000 b850 	b.w	8000992 <__retarget_lock_release_recursive>
 80008f2:	bf00      	nop
 80008f4:	200001f8 	.word	0x200001f8

080008f8 <strncmp>:
 80008f8:	b510      	push	{r4, lr}
 80008fa:	b16a      	cbz	r2, 8000918 <strncmp+0x20>
 80008fc:	3901      	subs	r1, #1
 80008fe:	1884      	adds	r4, r0, r2
 8000900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000908:	429a      	cmp	r2, r3
 800090a:	d103      	bne.n	8000914 <strncmp+0x1c>
 800090c:	42a0      	cmp	r0, r4
 800090e:	d001      	beq.n	8000914 <strncmp+0x1c>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d1f5      	bne.n	8000900 <strncmp+0x8>
 8000914:	1ad0      	subs	r0, r2, r3
 8000916:	bd10      	pop	{r4, pc}
 8000918:	4610      	mov	r0, r2
 800091a:	e7fc      	b.n	8000916 <strncmp+0x1e>

0800091c <_sbrk_r>:
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4d06      	ldr	r5, [pc, #24]	@ (8000938 <_sbrk_r+0x1c>)
 8000920:	2300      	movs	r3, #0
 8000922:	4604      	mov	r4, r0
 8000924:	4608      	mov	r0, r1
 8000926:	602b      	str	r3, [r5, #0]
 8000928:	f7ff fed0 	bl	80006cc <_sbrk>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	d102      	bne.n	8000936 <_sbrk_r+0x1a>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b103      	cbz	r3, 8000936 <_sbrk_r+0x1a>
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	200001f4 	.word	0x200001f4

0800093c <__errno>:
 800093c:	4b01      	ldr	r3, [pc, #4]	@ (8000944 <__errno+0x8>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000044 	.word	0x20000044

08000948 <__libc_init_array>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	4d0d      	ldr	r5, [pc, #52]	@ (8000980 <__libc_init_array+0x38>)
 800094c:	4c0d      	ldr	r4, [pc, #52]	@ (8000984 <__libc_init_array+0x3c>)
 800094e:	1b64      	subs	r4, r4, r5
 8000950:	10a4      	asrs	r4, r4, #2
 8000952:	2600      	movs	r6, #0
 8000954:	42a6      	cmp	r6, r4
 8000956:	d109      	bne.n	800096c <__libc_init_array+0x24>
 8000958:	4d0b      	ldr	r5, [pc, #44]	@ (8000988 <__libc_init_array+0x40>)
 800095a:	4c0c      	ldr	r4, [pc, #48]	@ (800098c <__libc_init_array+0x44>)
 800095c:	f000 f81a 	bl	8000994 <_init>
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	2600      	movs	r6, #0
 8000966:	42a6      	cmp	r6, r4
 8000968:	d105      	bne.n	8000976 <__libc_init_array+0x2e>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000970:	4798      	blx	r3
 8000972:	3601      	adds	r6, #1
 8000974:	e7ee      	b.n	8000954 <__libc_init_array+0xc>
 8000976:	f855 3b04 	ldr.w	r3, [r5], #4
 800097a:	4798      	blx	r3
 800097c:	3601      	adds	r6, #1
 800097e:	e7f2      	b.n	8000966 <__libc_init_array+0x1e>
 8000980:	080009bc 	.word	0x080009bc
 8000984:	080009bc 	.word	0x080009bc
 8000988:	080009bc 	.word	0x080009bc
 800098c:	080009c0 	.word	0x080009c0

08000990 <__retarget_lock_acquire_recursive>:
 8000990:	4770      	bx	lr

08000992 <__retarget_lock_release_recursive>:
 8000992:	4770      	bx	lr

08000994 <_init>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr

080009a0 <_fini>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	bf00      	nop
 80009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a6:	bc08      	pop	{r3}
 80009a8:	469e      	mov	lr, r3
 80009aa:	4770      	bx	lr
