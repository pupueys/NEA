
IntegrationEthan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000081c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080009b0  080009b0  000019b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009c0  080009c0  00002094  2**0
                  CONTENTS
  4 .ARM          00000000  080009c0  080009c0  00002094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009c0  080009c0  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009c0  080009c0  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009c4  080009c4  000019c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080009c8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002094  2**0
                  CONTENTS
 10 .bss          00000168  20000094  20000094  00002094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00002094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001913  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000814  00000000  00000000  000039d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000041f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c9  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016283  00000000  00000000  000043f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000259e  00000000  00000000  0001a674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076958  00000000  00000000  0001cc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009356a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000061c  00000000  00000000  000935b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00093bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000094 	.word	0x20000094
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000998 	.word	0x08000998

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000098 	.word	0x20000098
 80001d0:	08000998 	.word	0x08000998

080001d4 <enable_clocks>:
#include "stm32f303xc.h"
#include "set_get_leds.h"


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_clocks+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_clocks+0x1c>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <led_case>:

uint8_t led_case(char *restofwords) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]

    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 8000228:	e00f      	b.n	800024a <led_case+0x32>
        value <<= 1; // Shift left
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	73fb      	strb	r3, [r7, #15]
        if (restofwords[i] == '1') {
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b31      	cmp	r3, #49	@ 0x31
 800023a:	d103      	bne.n	8000244 <led_case+0x2c>
            value |= 1;
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	73fb      	strb	r3, [r7, #15]
        }
        i++;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	3301      	adds	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
    while (restofwords[i] != '\0' && i < 8) { // Only process 8 bits
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d002      	beq.n	800025c <led_case+0x44>
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b07      	cmp	r3, #7
 800025a:	dde6      	ble.n	800022a <led_case+0x12>
    }

    return value;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <main>:
#include "parse.h"

#define BUFFER_SIZE 128
#define TERMINATOR '\0'

int main() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

	SerialInitialise(BUFFER_SIZE, BAUD_115200, &USART1_PORT, &parse_buffer);
 8000270:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <main+0x14>)
 8000272:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <main+0x18>)
 8000274:	2104      	movs	r1, #4
 8000276:	2080      	movs	r0, #128	@ 0x80
 8000278:	f000 f888 	bl	800038c <SerialInitialise>

	for (;;) {
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x10>
 8000280:	08000289 	.word	0x08000289
 8000284:	20000000 	.word	0x20000000

08000288 <parse_buffer>:
#include "parse.h"

#define SERIAL_ARG 7
#define LED_ARG 4

void parse_buffer(volatile uint8_t *buffer, uint32_t size) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]

	// Checks if the argument is to transmit via serial
	if ((size >= SERIAL_ARG && strncmp((volatile uint8_t*)buffer, "serial ", SERIAL_ARG) == 0)) {
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b06      	cmp	r3, #6
 8000296:	d90e      	bls.n	80002b6 <parse_buffer+0x2e>
 8000298:	2207      	movs	r2, #7
 800029a:	4915      	ldr	r1, [pc, #84]	@ (80002f0 <parse_buffer+0x68>)
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fb2d 	bl	80008fc <strncmp>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d106      	bne.n	80002b6 <parse_buffer+0x2e>

		tx_string((volatile uint8_t*)buffer + SERIAL_ARG, &USART1_PORT);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3307      	adds	r3, #7
 80002ac:	4911      	ldr	r1, [pc, #68]	@ (80002f4 <parse_buffer+0x6c>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f9c3 	bl	800063a <tx_string>
		return;
 80002b4:	e019      	b.n	80002ea <parse_buffer+0x62>
	}

	// Checks if the argument is to display leds
	if ((size >= LED_ARG && strncmp((volatile uint8_t*)buffer, "led ", LED_ARG) == 0)) {
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d916      	bls.n	80002ea <parse_buffer+0x62>
 80002bc:	2204      	movs	r2, #4
 80002be:	490e      	ldr	r1, [pc, #56]	@ (80002f8 <parse_buffer+0x70>)
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f000 fb1b 	bl	80008fc <strncmp>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10e      	bne.n	80002ea <parse_buffer+0x62>

                uint8_t led_pattern = led_case((volatile uint8_t*)buffer + LED_ARG);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3304      	adds	r3, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffa1 	bl	8000218 <led_case>
 80002d6:	4603      	mov	r3, r0
 80002d8:	73fb      	strb	r3, [r7, #15]
                enable_clocks();                         // enable the clocks
 80002da:	f7ff ff7b 	bl	80001d4 <enable_clocks>
                initialise_board();                      // initialise the boards
 80002de:	f7ff ff89 	bl	80001f4 <initialise_board>
                set_led_state(led_pattern);
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9db 	bl	80006a0 <set_led_state>
	}

}
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	080009b0 	.word	0x080009b0
 80002f4:	20000000 	.word	0x20000000
 80002f8:	080009b8 	.word	0x080009b8

080002fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	2b00      	cmp	r3, #0
 800030c:	db0b      	blt.n	8000326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 021f 	and.w	r2, r3, #31
 8000314:	4907      	ldr	r1, [pc, #28]	@ (8000334 <__NVIC_EnableIRQ+0x38>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	095b      	lsrs	r3, r3, #5
 800031c:	2001      	movs	r0, #1
 800031e:	fa00 f202 	lsl.w	r2, r0, r2
 8000322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000e100 	.word	0xe000e100

08000338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	6039      	str	r1, [r7, #0]
 8000342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	db0a      	blt.n	8000362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	490c      	ldr	r1, [pc, #48]	@ (8000384 <__NVIC_SetPriority+0x4c>)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	0112      	lsls	r2, r2, #4
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	440b      	add	r3, r1
 800035c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000360:	e00a      	b.n	8000378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4908      	ldr	r1, [pc, #32]	@ (8000388 <__NVIC_SetPriority+0x50>)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	f003 030f 	and.w	r3, r3, #15
 800036e:	3b04      	subs	r3, #4
 8000370:	0112      	lsls	r2, r2, #4
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	440b      	add	r3, r1
 8000376:	761a      	strb	r2, [r3, #24]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	e000e100 	.word	0xe000e100
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <SerialInitialise>:
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rx_complete)(volatile uint8_t*, uint32_t)) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	603b      	str	r3, [r7, #0]
	// baudRate: the serial baud rate
	// serial_port: address of the serial port to initialise
	// rx_complete_function: pointer to callback function; inputs are pointer to string buffer
	//						 and length of the stored string respectively

	serial_port->callback = rx_complete;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	63da      	str	r2, [r3, #60]	@ 0x3c


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a0:	4b54      	ldr	r3, [pc, #336]	@ (80004f4 <SerialInitialise+0x168>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	4a53      	ldr	r2, [pc, #332]	@ (80004f4 <SerialInitialise+0x168>)
 80003a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003aa:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ac:	4b51      	ldr	r3, [pc, #324]	@ (80004f4 <SerialInitialise+0x168>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a50      	ldr	r2, [pc, #320]	@ (80004f4 <SerialInitialise+0x168>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	691a      	ldr	r2, [r3, #16]
 80003bc:	4b4d      	ldr	r3, [pc, #308]	@ (80004f4 <SerialInitialise+0x168>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	494c      	ldr	r1, [pc, #304]	@ (80004f4 <SerialInitialise+0x168>)
 80003c2:	4313      	orrs	r3, r2
 80003c4:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6952      	ldr	r2, [r2, #20]
 80003ce:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6992      	ldr	r2, [r2, #24]
 80003d8:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	69d9      	ldr	r1, [r3, #28]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	6a1a      	ldr	r2, [r3, #32]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6a19      	ldr	r1, [r3, #32]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68da      	ldr	r2, [r3, #12]
 8000402:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <SerialInitialise+0x168>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	493b      	ldr	r1, [pc, #236]	@ (80004f4 <SerialInitialise+0x168>)
 8000408:	4313      	orrs	r3, r2
 800040a:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	4b38      	ldr	r3, [pc, #224]	@ (80004f4 <SerialInitialise+0x168>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4937      	ldr	r1, [pc, #220]	@ (80004f4 <SerialInitialise+0x168>)
 8000416:	4313      	orrs	r3, r2
 8000418:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	330c      	adds	r3, #12
 8000420:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b04      	cmp	r3, #4
 8000426:	d823      	bhi.n	8000470 <SerialInitialise+0xe4>
 8000428:	a201      	add	r2, pc, #4	@ (adr r2, 8000430 <SerialInitialise+0xa4>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000445 	.word	0x08000445
 8000434:	0800044f 	.word	0x0800044f
 8000438:	08000459 	.word	0x08000459
 800043c:	08000461 	.word	0x08000461
 8000440:	08000469 	.word	0x08000469
	case BAUD_9600:
		*baud_rate_config = 0x342;  // 9600 at 8MHz
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	f240 3242 	movw	r2, #834	@ 0x342
 800044a:	801a      	strh	r2, [r3, #0]
		break;
 800044c:	e010      	b.n	8000470 <SerialInitialise+0xe4>
	case BAUD_19200:
		*baud_rate_config = 0x19C;  // 19200 at 8MHz
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8000454:	801a      	strh	r2, [r3, #0]
		break;
 8000456:	e00b      	b.n	8000470 <SerialInitialise+0xe4>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	22d0      	movs	r2, #208	@ 0xd0
 800045c:	801a      	strh	r2, [r3, #0]
		break;
 800045e:	e007      	b.n	8000470 <SerialInitialise+0xe4>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	228b      	movs	r2, #139	@ 0x8b
 8000464:	801a      	strh	r2, [r3, #0]
		break;
 8000466:	e003      	b.n	8000470 <SerialInitialise+0xe4>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	2246      	movs	r2, #70	@ 0x46
 800046c:	801a      	strh	r2, [r3, #0]
		break;
 800046e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f042 020d 	orr.w	r2, r2, #13
 800047e:	601a      	str	r2, [r3, #0]

	// configuring buffers
	serial_port->BufferSize = buffer_size;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	631a      	str	r2, [r3, #48]	@ 0x30
	serial_port->Buffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f980 	bl	8000790 <malloc>
 8000490:	4603      	mov	r3, r0
 8000492:	461a      	mov	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->SecondBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f977 	bl	8000790 <malloc>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004aa:	b672      	cpsid	i
}
 80004ac:	bf00      	nop

	__disable_irq(); // disable all interrupts while changing settings

	// enabling the interrupts
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;		// enabling RXNE interrupts
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f042 0220 	orr.w	r2, r2, #32
 80004bc:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;		// enabling the error interrupts
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f042 0201 	orr.w	r2, r2, #1
 80004cc:	609a      	str	r2, [r3, #8]

	// activating interrupts and setting priority
	NVIC_SetPriority(serial_port->UART_IRQn, 5);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	2105      	movs	r1, #5
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff2e 	bl	8000338 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);			//  enable UART interrupts
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff0a 	bl	80002fc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004e8:	b662      	cpsie	i
}
 80004ea:	bf00      	nop

	__enable_irq(); // re-enable all interrupts

}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

	// when interrupt is reached, call the rx_function
	rx_function(&USART1_PORT);
 80004fc:	4806      	ldr	r0, [pc, #24]	@ (8000518 <USART1_EXTI25_IRQHandler+0x20>)
 80004fe:	f000 f80f 	bl	8000520 <rx_function>

	// transmit if and only if the transmit interrupt TXEIE is triggered
	if (!(USART1->CR1 & USART_CR1_TXEIE) == 0) {
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <USART1_EXTI25_IRQHandler+0x24>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <USART1_EXTI25_IRQHandler+0x1c>
		tx_function(&USART1_PORT);
 800050e:	4802      	ldr	r0, [pc, #8]	@ (8000518 <USART1_EXTI25_IRQHandler+0x20>)
 8000510:	f000 f8a3 	bl	800065a <tx_function>
	}
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	40013800 	.word	0x40013800

08000520 <rx_function>:

void rx_function(SerialPort *serial_port) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	// checking if receiving is working properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 0320 	and.w	r3, r3, #32
 8000532:	2b00      	cmp	r3, #0
 8000534:	d050      	beq.n	80005d8 <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	f003 0308 	and.w	r3, r3, #8
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 8000540:	2b00      	cmp	r3, #0
 8000542:	d149      	bne.n	80005d8 <rx_function+0xb8>
		(serial_port->UART->ISR & USART_ISR_FE) == 0)  {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0302 	and.w	r3, r3, #2
		(serial_port->UART->ISR & USART_ISR_ORE) == 0 &&
 800054e:	2b00      	cmp	r3, #0
 8000550:	d142      	bne.n	80005d8 <rx_function+0xb8>

		// reading the character into the buffer
		serial_port->Buffer[serial_port->Count] = (uint8_t)(serial_port->UART->RDR);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000558:	b299      	uxth	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000562:	4413      	add	r3, r2
 8000564:	b2ca      	uxtb	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
		serial_port->Count++;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c

		// if the buffer has been filled, append the terminating character
		if (serial_port->Count + 1 == serial_port->BufferSize) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	429a      	cmp	r2, r3
 800057e:	d10b      	bne.n	8000598 <rx_function+0x78>

			serial_port->Buffer[serial_port->Count] = TERMINATOR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000588:	4413      	add	r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			serial_port->Count++;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
		}

		// if the terminating character has been read, reading is complete and callback occurs
		// (extension) swap the buffers
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d11e      	bne.n	80005ea <rx_function+0xca>

			volatile uint8_t* temp_pt = serial_port->Buffer;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b0:	60fb      	str	r3, [r7, #12]
			serial_port->Buffer = serial_port->SecondBuffer;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	625a      	str	r2, [r3, #36]	@ 0x24
			serial_port->SecondBuffer = temp_pt;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28

			// callback with the first buffer since the first buffer is finished reading
			serial_port->callback(serial_port->SecondBuffer, serial_port->Count);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80005cc:	4611      	mov	r1, r2
 80005ce:	4798      	blx	r3
			serial_port->Count = 0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (serial_port->Buffer[serial_port->Count - 1 ] == TERMINATOR) {
 80005d6:	e008      	b.n	80005ea <rx_function+0xca>
		}

	}	else {
		// clear error flags
			serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6a1a      	ldr	r2, [r3, #32]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f042 020a 	orr.w	r2, r2, #10
 80005e6:	621a      	str	r2, [r3, #32]

	}

}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <tx_enable>:

void tx_enable(bool flag, SerialPort *serial_port) {
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	4603      	mov	r3, r0
 80005fa:	6039      	str	r1, [r7, #0]
 80005fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80005fe:	b672      	cpsid	i
}
 8000600:	bf00      	nop

	__disable_irq();

	// enabling the TXEIE interrupt if transmission is enabled
	if (flag == true) {
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <tx_enable+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e007      	b.n	800062a <tx_enable+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;	// ANDing with compliment to disable
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800062a:	b662      	cpsie	i
}
 800062c:	bf00      	nop
	}

	__enable_irq();
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <tx_string>:

void tx_string(uint8_t *str, SerialPort *serial_port) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]

	// set the transmission pointer to be the beginning of the string array
	serial_port->TxPointer = str;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
	tx_enable(true, serial_port);
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ffd0 	bl	80005f2 <tx_enable>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <tx_function>:

void tx_function(SerialPort *serial_port) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]

	// checking for terminating character
	if (*(serial_port->TxPointer) == TERMINATOR) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <tx_function+0x24>

		serial_port->UART->TDR = TERMINATOR;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	851a      	strh	r2, [r3, #40]	@ 0x28
		tx_enable(false, serial_port);		// disable transmission interrupts
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ffba 	bl	80005f2 <tx_enable>
	}

	// transmit character
	serial_port->UART->TDR = *serial_port->TxPointer;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	851a      	strh	r2, [r3, #40]	@ 0x28
	serial_port->TxPointer++;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <set_led_state>:
uint8_t get_led_state(void) {
	return led_state;                         // return the current led state stored in led_state
}

// Set the LED state manually
void set_led_state(uint8_t state) {                // pass in a uint8_t value which represents the LED state
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	led_state = state;                             // set the input of the function to the led_state
 80006aa:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <set_led_state+0x28>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	7013      	strb	r3, [r2, #0]
	*((uint8_t*)&(GPIOE->ODR) + 1) = led_state;    // update the LED state to the ODR
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <set_led_state+0x2c>)
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <set_led_state+0x28>)
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000040 	.word	0x20000040
 80006cc:	48001015 	.word	0x48001015

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	@ (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f000 f91e 	bl	8000940 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000a000 	.word	0x2000a000
 8000730:	00000400 	.word	0x00000400
 8000734:	200000b0 	.word	0x200000b0
 8000738:	20000200 	.word	0x20000200

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	@ (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f000 f8ef 	bl	800094c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fd7d 	bl	800026c <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000780:	080009c8 	.word	0x080009c8
  ldr r2, =_sbss
 8000784:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000788:	200001fc 	.word	0x200001fc

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <malloc>:
 8000790:	4b02      	ldr	r3, [pc, #8]	@ (800079c <malloc+0xc>)
 8000792:	4601      	mov	r1, r0
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f000 b825 	b.w	80007e4 <_malloc_r>
 800079a:	bf00      	nop
 800079c:	20000044 	.word	0x20000044

080007a0 <sbrk_aligned>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	4e0f      	ldr	r6, [pc, #60]	@ (80007e0 <sbrk_aligned+0x40>)
 80007a4:	460c      	mov	r4, r1
 80007a6:	6831      	ldr	r1, [r6, #0]
 80007a8:	4605      	mov	r5, r0
 80007aa:	b911      	cbnz	r1, 80007b2 <sbrk_aligned+0x12>
 80007ac:	f000 f8b8 	bl	8000920 <_sbrk_r>
 80007b0:	6030      	str	r0, [r6, #0]
 80007b2:	4621      	mov	r1, r4
 80007b4:	4628      	mov	r0, r5
 80007b6:	f000 f8b3 	bl	8000920 <_sbrk_r>
 80007ba:	1c43      	adds	r3, r0, #1
 80007bc:	d103      	bne.n	80007c6 <sbrk_aligned+0x26>
 80007be:	f04f 34ff 	mov.w	r4, #4294967295
 80007c2:	4620      	mov	r0, r4
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	1cc4      	adds	r4, r0, #3
 80007c8:	f024 0403 	bic.w	r4, r4, #3
 80007cc:	42a0      	cmp	r0, r4
 80007ce:	d0f8      	beq.n	80007c2 <sbrk_aligned+0x22>
 80007d0:	1a21      	subs	r1, r4, r0
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 f8a4 	bl	8000920 <_sbrk_r>
 80007d8:	3001      	adds	r0, #1
 80007da:	d1f2      	bne.n	80007c2 <sbrk_aligned+0x22>
 80007dc:	e7ef      	b.n	80007be <sbrk_aligned+0x1e>
 80007de:	bf00      	nop
 80007e0:	200000b4 	.word	0x200000b4

080007e4 <_malloc_r>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	1ccd      	adds	r5, r1, #3
 80007ea:	f025 0503 	bic.w	r5, r5, #3
 80007ee:	3508      	adds	r5, #8
 80007f0:	2d0c      	cmp	r5, #12
 80007f2:	bf38      	it	cc
 80007f4:	250c      	movcc	r5, #12
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	4606      	mov	r6, r0
 80007fa:	db01      	blt.n	8000800 <_malloc_r+0x1c>
 80007fc:	42a9      	cmp	r1, r5
 80007fe:	d904      	bls.n	800080a <_malloc_r+0x26>
 8000800:	230c      	movs	r3, #12
 8000802:	6033      	str	r3, [r6, #0]
 8000804:	2000      	movs	r0, #0
 8000806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800080a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008e0 <_malloc_r+0xfc>
 800080e:	f000 f869 	bl	80008e4 <__malloc_lock>
 8000812:	f8d8 3000 	ldr.w	r3, [r8]
 8000816:	461c      	mov	r4, r3
 8000818:	bb44      	cbnz	r4, 800086c <_malloc_r+0x88>
 800081a:	4629      	mov	r1, r5
 800081c:	4630      	mov	r0, r6
 800081e:	f7ff ffbf 	bl	80007a0 <sbrk_aligned>
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	4604      	mov	r4, r0
 8000826:	d158      	bne.n	80008da <_malloc_r+0xf6>
 8000828:	f8d8 4000 	ldr.w	r4, [r8]
 800082c:	4627      	mov	r7, r4
 800082e:	2f00      	cmp	r7, #0
 8000830:	d143      	bne.n	80008ba <_malloc_r+0xd6>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d04b      	beq.n	80008ce <_malloc_r+0xea>
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	4639      	mov	r1, r7
 800083a:	4630      	mov	r0, r6
 800083c:	eb04 0903 	add.w	r9, r4, r3
 8000840:	f000 f86e 	bl	8000920 <_sbrk_r>
 8000844:	4581      	cmp	r9, r0
 8000846:	d142      	bne.n	80008ce <_malloc_r+0xea>
 8000848:	6821      	ldr	r1, [r4, #0]
 800084a:	1a6d      	subs	r5, r5, r1
 800084c:	4629      	mov	r1, r5
 800084e:	4630      	mov	r0, r6
 8000850:	f7ff ffa6 	bl	80007a0 <sbrk_aligned>
 8000854:	3001      	adds	r0, #1
 8000856:	d03a      	beq.n	80008ce <_malloc_r+0xea>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	442b      	add	r3, r5
 800085c:	6023      	str	r3, [r4, #0]
 800085e:	f8d8 3000 	ldr.w	r3, [r8]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	bb62      	cbnz	r2, 80008c0 <_malloc_r+0xdc>
 8000866:	f8c8 7000 	str.w	r7, [r8]
 800086a:	e00f      	b.n	800088c <_malloc_r+0xa8>
 800086c:	6822      	ldr	r2, [r4, #0]
 800086e:	1b52      	subs	r2, r2, r5
 8000870:	d420      	bmi.n	80008b4 <_malloc_r+0xd0>
 8000872:	2a0b      	cmp	r2, #11
 8000874:	d917      	bls.n	80008a6 <_malloc_r+0xc2>
 8000876:	1961      	adds	r1, r4, r5
 8000878:	42a3      	cmp	r3, r4
 800087a:	6025      	str	r5, [r4, #0]
 800087c:	bf18      	it	ne
 800087e:	6059      	strne	r1, [r3, #4]
 8000880:	6863      	ldr	r3, [r4, #4]
 8000882:	bf08      	it	eq
 8000884:	f8c8 1000 	streq.w	r1, [r8]
 8000888:	5162      	str	r2, [r4, r5]
 800088a:	604b      	str	r3, [r1, #4]
 800088c:	4630      	mov	r0, r6
 800088e:	f000 f82f 	bl	80008f0 <__malloc_unlock>
 8000892:	f104 000b 	add.w	r0, r4, #11
 8000896:	1d23      	adds	r3, r4, #4
 8000898:	f020 0007 	bic.w	r0, r0, #7
 800089c:	1ac2      	subs	r2, r0, r3
 800089e:	bf1c      	itt	ne
 80008a0:	1a1b      	subne	r3, r3, r0
 80008a2:	50a3      	strne	r3, [r4, r2]
 80008a4:	e7af      	b.n	8000806 <_malloc_r+0x22>
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	bf0c      	ite	eq
 80008ac:	f8c8 2000 	streq.w	r2, [r8]
 80008b0:	605a      	strne	r2, [r3, #4]
 80008b2:	e7eb      	b.n	800088c <_malloc_r+0xa8>
 80008b4:	4623      	mov	r3, r4
 80008b6:	6864      	ldr	r4, [r4, #4]
 80008b8:	e7ae      	b.n	8000818 <_malloc_r+0x34>
 80008ba:	463c      	mov	r4, r7
 80008bc:	687f      	ldr	r7, [r7, #4]
 80008be:	e7b6      	b.n	800082e <_malloc_r+0x4a>
 80008c0:	461a      	mov	r2, r3
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	42a3      	cmp	r3, r4
 80008c6:	d1fb      	bne.n	80008c0 <_malloc_r+0xdc>
 80008c8:	2300      	movs	r3, #0
 80008ca:	6053      	str	r3, [r2, #4]
 80008cc:	e7de      	b.n	800088c <_malloc_r+0xa8>
 80008ce:	230c      	movs	r3, #12
 80008d0:	6033      	str	r3, [r6, #0]
 80008d2:	4630      	mov	r0, r6
 80008d4:	f000 f80c 	bl	80008f0 <__malloc_unlock>
 80008d8:	e794      	b.n	8000804 <_malloc_r+0x20>
 80008da:	6005      	str	r5, [r0, #0]
 80008dc:	e7d6      	b.n	800088c <_malloc_r+0xa8>
 80008de:	bf00      	nop
 80008e0:	200000b8 	.word	0x200000b8

080008e4 <__malloc_lock>:
 80008e4:	4801      	ldr	r0, [pc, #4]	@ (80008ec <__malloc_lock+0x8>)
 80008e6:	f000 b855 	b.w	8000994 <__retarget_lock_acquire_recursive>
 80008ea:	bf00      	nop
 80008ec:	200001f8 	.word	0x200001f8

080008f0 <__malloc_unlock>:
 80008f0:	4801      	ldr	r0, [pc, #4]	@ (80008f8 <__malloc_unlock+0x8>)
 80008f2:	f000 b850 	b.w	8000996 <__retarget_lock_release_recursive>
 80008f6:	bf00      	nop
 80008f8:	200001f8 	.word	0x200001f8

080008fc <strncmp>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b16a      	cbz	r2, 800091c <strncmp+0x20>
 8000900:	3901      	subs	r1, #1
 8000902:	1884      	adds	r4, r0, r2
 8000904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000908:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800090c:	429a      	cmp	r2, r3
 800090e:	d103      	bne.n	8000918 <strncmp+0x1c>
 8000910:	42a0      	cmp	r0, r4
 8000912:	d001      	beq.n	8000918 <strncmp+0x1c>
 8000914:	2a00      	cmp	r2, #0
 8000916:	d1f5      	bne.n	8000904 <strncmp+0x8>
 8000918:	1ad0      	subs	r0, r2, r3
 800091a:	bd10      	pop	{r4, pc}
 800091c:	4610      	mov	r0, r2
 800091e:	e7fc      	b.n	800091a <strncmp+0x1e>

08000920 <_sbrk_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d06      	ldr	r5, [pc, #24]	@ (800093c <_sbrk_r+0x1c>)
 8000924:	2300      	movs	r3, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	602b      	str	r3, [r5, #0]
 800092c:	f7ff fed0 	bl	80006d0 <_sbrk>
 8000930:	1c43      	adds	r3, r0, #1
 8000932:	d102      	bne.n	800093a <_sbrk_r+0x1a>
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	b103      	cbz	r3, 800093a <_sbrk_r+0x1a>
 8000938:	6023      	str	r3, [r4, #0]
 800093a:	bd38      	pop	{r3, r4, r5, pc}
 800093c:	200001f4 	.word	0x200001f4

08000940 <__errno>:
 8000940:	4b01      	ldr	r3, [pc, #4]	@ (8000948 <__errno+0x8>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000044 	.word	0x20000044

0800094c <__libc_init_array>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4d0d      	ldr	r5, [pc, #52]	@ (8000984 <__libc_init_array+0x38>)
 8000950:	4c0d      	ldr	r4, [pc, #52]	@ (8000988 <__libc_init_array+0x3c>)
 8000952:	1b64      	subs	r4, r4, r5
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	2600      	movs	r6, #0
 8000958:	42a6      	cmp	r6, r4
 800095a:	d109      	bne.n	8000970 <__libc_init_array+0x24>
 800095c:	4d0b      	ldr	r5, [pc, #44]	@ (800098c <__libc_init_array+0x40>)
 800095e:	4c0c      	ldr	r4, [pc, #48]	@ (8000990 <__libc_init_array+0x44>)
 8000960:	f000 f81a 	bl	8000998 <_init>
 8000964:	1b64      	subs	r4, r4, r5
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	2600      	movs	r6, #0
 800096a:	42a6      	cmp	r6, r4
 800096c:	d105      	bne.n	800097a <__libc_init_array+0x2e>
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f855 3b04 	ldr.w	r3, [r5], #4
 8000974:	4798      	blx	r3
 8000976:	3601      	adds	r6, #1
 8000978:	e7ee      	b.n	8000958 <__libc_init_array+0xc>
 800097a:	f855 3b04 	ldr.w	r3, [r5], #4
 800097e:	4798      	blx	r3
 8000980:	3601      	adds	r6, #1
 8000982:	e7f2      	b.n	800096a <__libc_init_array+0x1e>
 8000984:	080009c0 	.word	0x080009c0
 8000988:	080009c0 	.word	0x080009c0
 800098c:	080009c0 	.word	0x080009c0
 8000990:	080009c4 	.word	0x080009c4

08000994 <__retarget_lock_acquire_recursive>:
 8000994:	4770      	bx	lr

08000996 <__retarget_lock_release_recursive>:
 8000996:	4770      	bx	lr

08000998 <_init>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	bf00      	nop
 800099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099e:	bc08      	pop	{r3}
 80009a0:	469e      	mov	lr, r3
 80009a2:	4770      	bx	lr

080009a4 <_fini>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr
