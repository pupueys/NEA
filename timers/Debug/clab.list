
clab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000141c  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006a6  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ac  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00001da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d6d  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000afa  00000000  00000000  00016c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072610  00000000  00000000  0001771f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00089d2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001b4  00000000  00000000  00089d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00089f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003fc 	.word	0x080003fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003fc 	.word	0x080003fc

080001d4 <enable_clocks>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <enable_clocks+0x28>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <enable_clocks+0x28>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <enable_clocks+0x28>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <enable_clocks+0x28>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	61d3      	str	r3, [r2, #28]

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000206:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <initialise_board+0x20>)
 8000208:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000210:	801a      	strh	r2, [r3, #0]

}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	48001002 	.word	0x48001002

08000224 <led_callback>:

void led_callback(void) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
    static uint8_t led_state = 0;  // 0 = OFF, 1 = ON
    uint8_t *led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <led_callback+0x38>)
 800022c:	607b      	str	r3, [r7, #4]

    if (led_state == 0) {
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <led_callback+0x3c>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d106      	bne.n	8000244 <led_callback+0x20>
        *led_output_register = 0b01010101;  // Turn LEDs ON
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2255      	movs	r2, #85	@ 0x55
 800023a:	701a      	strb	r2, [r3, #0]
        led_state = 1;  // Next time, turn OFF
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <led_callback+0x3c>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
    } else {
        *led_output_register = 0x00;        // Turn LEDs OFF
        led_state = 0;  // Next time, turn ON
    }
}
 8000242:	e005      	b.n	8000250 <led_callback+0x2c>
        *led_output_register = 0x00;        // Turn LEDs OFF
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
        led_state = 0;  // Next time, turn ON
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <led_callback+0x3c>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	48001015 	.word	0x48001015
 8000260:	2000001c 	.word	0x2000001c

08000264 <main>:



//  general purpose timer registers page 647
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	enable_clocks();
 8000268:	f7ff ffb4 	bl	80001d4 <enable_clocks>
	initialise_board();
 800026c:	f7ff ffc8 	bl	8000200 <initialise_board>

	// PART A
	Timer_Init(500, led_callback);	/// put in interval in ms
 8000270:	4906      	ldr	r1, [pc, #24]	@ (800028c <main+0x28>)
 8000272:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000276:	f000 f80d 	bl	8000294 <Timer_Init>


	while(1) {
		Timer_Update();
 800027a:	f000 f84b 	bl	8000314 <Timer_Update>

		static uint32_t counter = 0;
		counter++;
 800027e:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <main+0x2c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	4a02      	ldr	r2, [pc, #8]	@ (8000290 <main+0x2c>)
 8000286:	6013      	str	r3, [r2, #0]
	while(1) {
 8000288:	bf00      	nop
 800028a:	e7f6      	b.n	800027a <main+0x16>
 800028c:	08000225 	.word	0x08000225
 8000290:	20000020 	.word	0x20000020

08000294 <Timer_Init>:
static uint32_t timer_interval_ticks = 0;      // Also private
static uint8_t oneshot_enabled = 0;  // 0 = normal mode, 1 = one-shot mode



void Timer_Init(uint32_t interval_ms, void (*callback)(void)) {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]

	timer_interval_ticks = 10 * interval_ms;
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4613      	mov	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	4413      	add	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <Timer_Init+0x74>)
 80002ac:	601a      	str	r2, [r3, #0]
	timer_callback = callback;
 80002ae:	4a17      	ldr	r2, [pc, #92]	@ (800030c <Timer_Init+0x78>)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	6013      	str	r3, [r2, #0]

    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	// Enable timer clock
 80002b4:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <Timer_Init+0x7c>)
 80002b6:	69db      	ldr	r3, [r3, #28]
 80002b8:	4a15      	ldr	r2, [pc, #84]	@ (8000310 <Timer_Init+0x7c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 799;         // 8MHz / 800 = 10kHz
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c4:	f240 321f 	movw	r2, #799	@ 0x31f
 80002c8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xffffffff;
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ce:	f04f 32ff 	mov.w	r2, #4294967295
 80002d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	2200      	movs	r2, #0
 80002da:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM2->EGR |= TIM_EGR_UG;  // <-- Force update event to apply prescaler NOW!
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]


	TIM2->CR1 |= TIM_CR1_CEN;  // Start timer
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]

}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	20000028 	.word	0x20000028
 800030c:	20000024 	.word	0x20000024
 8000310:	40021000 	.word	0x40021000

08000314 <Timer_Update>:



// Function to call regularly (polling)
void Timer_Update(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

	if(TIM2->CNT >= timer_interval_ticks) {
 8000318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <Timer_Update+0x40>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d314      	bcc.n	8000350 <Timer_Update+0x3c>
		TIM2->CNT = 0;
 8000326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	@ 0x24

		if (timer_callback != NULL) {
 800032e:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <Timer_Update+0x44>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d002      	beq.n	800033c <Timer_Update+0x28>
		    timer_callback();
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <Timer_Update+0x44>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4798      	blx	r3
		}

		if (oneshot_enabled) {
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <Timer_Update+0x48>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d005      	beq.n	8000350 <Timer_Update+0x3c>
			oneshot_enabled = 0;
 8000344:	4b05      	ldr	r3, [pc, #20]	@ (800035c <Timer_Update+0x48>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
			timer_callback = NULL;
 800034a:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <Timer_Update+0x44>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	20000024 	.word	0x20000024
 800035c:	2000002c 	.word	0x2000002c

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff67 	bl	8000264 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	20000030 	.word	0x20000030

080003b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC1_2_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	@ (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	@ (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	@ (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	@ (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
